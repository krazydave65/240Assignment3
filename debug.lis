     1                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
     2                                  ;   TTTTTTTTTTTTTTT               A               PPPPPP         Titan Assembly Project, CSUF
     3                                  ;          T                     A A              P    PP        Titan Assembly Project, CSUF
     4                                  ;          T                    A   A             P     PP       Titan Assembly Project, CSUF
     5                                  ;          T                   A     A            P      PP      Titan Assembly Project, CSUF
     6                                  ;          T                  A       A           P     PP       Titan Assembly Project, CSUF
     7                                  ;          T                 A         A          P    PP        Titan Assembly Project, CSUF
     8                                  ;          T                AAAAAAAAAAAAA         PPPPPP         Titan Assembly Project, CSUF
     9                                  ;          T               A             A        P              Titan Assembly Project, CSUF
    10                                  ;          T              A               A       P              Titan Assembly Project, CSUF
    11                                  ;          T             A                 A      P              Titan Assembly Project, CSUF
    12                                  ;          T            A                   A     P              Titan Assembly Project, CSUF
    13                                  ;
    14                                  ;Author information
    15                                  ;  Author name: Floyd Holliday
    16                                  ;  Author email: holliday@fullerton.edu
    17                                  ;Course information
    18                                  ;  Course number: CPSC240
    19                                  ;  Assignment number: 00
    20                                  ;  Due date: 9999-Dec-31
    21                                  ;  Date of last modification: 2014-Aug-09
    22                                  ;Project information
    23                                  ;  Project title: X86 Assembly Debugger
    24                                  ;  Purpose: Show contents of registers, stack, and arrays.  This is a tool used by assembly programmers during the development phase.
    25                                  ;  Status: In continuous maintenance
    26                                  ;  Project files: debug.inc, debug.asm
    27                                  ;  Modules (subprograms): showregisters, dumpstack, showfpusubprogram, showxmmregisters, showymmregisters
    28                                  ;  Those five subprograms are contained within this debug.asm file.
    29                                  ;Translator information
    30                                  ;  Linux: nasm -f elf64 -l debug.lis -o debug.o debug.asm
    31                                  ;References and credits
    32                                  ;  Dr. Paul Carter: www.drpaulcarter.com
    33                                  ;Format information
    34                                  ;  Page width: 172 columns
    35                                  ;  Begin comments: 61
    36                                  ;  Optimal print specification: Landscape orientation, 7 points, monospace, 8Â½x11 paper
    37                                  ;Restrictions
    38                                  ;  This software is for use by persons enrolled in CPSC240.  All other use is unauthorized.
    39                                  ;Information for users  
    40                                  ;  Make this Debug tool available for your own software.  First assemble this file.  Place the include statement |%include "debug.inc"| excluding the vertical bars in your
    41                                  ;  source code at the beginning.  Typically this include directive is the first statement other than comments in a program.
    42                                  ;Future enhancements pending
    43                                  ;  Add the save and restore feature to modules showregistersubprogram, showfpusubprogram, showxmmsubprogram
    44                                  ;  Localize all identifiers to their own subprogram in order that no identifier conflict with another identifier in this file.
    45                                  
    46                                  ;===========================================================================================================================================================================
    47                                  ;===== General facts used in Debug =========================================================================================================================================
    48                                  ;===========================================================================================================================================================================
    49                                  ;CCC-64 sequence of parameters (left to right):
    50                                  ;  1st  rdi
    51                                  ;  2nd  rsi
    52                                  ;  3nd  rdx
    53                                  ;  4rd  rcx
    54                                  ;  5th  r8
    55                                  ;  6th  r9
    56                                  ;  remainder on stack right to left
    57                                  
    58                                  ;Regarding which format specifier to use: the following appear to hold:
    59                                  ; "%x" designates 32-bit hex output with leading zeros suppressed.
    60                                  ; "%lx" designates 64-bit hex output
    61                                  ; "%llx" designates 128-bit hex output
    62                                  ; "%lllx" designates 256-bit hex output
    63                                  ; "%llld" designates 256-bit decimal output
    64                                  ; "%8x" designates 32-bit hex output in 8 columns
    65                                  ; "%016lx" designates 64-bit hex output in 16 columns with leading zeros displayed.
    66                                  ; "%lu" designates 64-bit unsigned integer.
    67                                  
    68                                  ;===========================================================================================================================================================================
    69                                  ;===== Begin subprogram showregisters ======================================================================================================================================
    70                                  ;===== Begin subprogram showregisters ======================================================================================================================================
    71                                  ;===== Begin subprogram showregisters ======================================================================================================================================
    72                                  ;===========================================================================================================================================================================
    73                                  ;Module information
    74                                  ;  This module's call name: showregisterssubprogram
    75                                  ;  Language: X86-64
    76                                  ;  Syntax: Intel
    77                                  ;  Date begun: 2010-Oct-28
    78                                  ;  Date last modified: 2014-August-31
    79                                  ;  Purpose: This module will show the contents of all general purpose registers including the flags register.
    80                                  ;  Status: The present source code is in production.  All GPRs are backed up.  State components are backed up if xsave and xrstor are implemented in the current processor.
    81                                  ;  Future enhancements: None.  This subprogram is complete.
    82                                  
    83                                  ;X86 rflags register:
    84                                  ;Bit# Mnemonic Name
    85                                  ;  0     CF    Carry flag
    86                                  ;  1           unused
    87                                  ;  2     PF    Parity flag
    88                                  ;  3           unused
    89                                  ;  4     AF    Auxiliary Carry flag
    90                                  ;  5           unused
    91                                  ;  6     ZF    Zero flag
    92                                  ;  7     SF    Sign flag
    93                                  ;  8     TF    Trap flag
    94                                  ;  9     IF    Interrupt flag
    95                                  ; 10     DF    Direction flag
    96                                  ; 11     OF    Overflow flag
    97                                  
    98                                  ;===== Expected format of the output =======================================================================================================================================
    99                                  ;Register Dump # 132
   100                                  ;rax = 0000000000000003 rbx = 0000000000000000 rcx = 0000000000000001 rdx = 00007f59b444aab0
   101                                  ;rsi = 0000000000000003 rdi = 0000000000602ad0 rbp = 00007fff7d9a6960 rsp = 00007fff7d9a6900
   102                                  ;r8  = 00007f59b496e01b r9  = 0000000000000001 r10 = 0000000000000000 r11 = 0000000000000246
   103                                  ;r12 = 0000000000000003 r13 = 00007fff7d9a6a40 r14 = 0000000000000019 r15 = 0000000000000000
   104                                  ;rip = 00000000004008bf
   105                                  ;rflags = 0000000000000246 of = 0 sf = 0 zf = 1 af = 0 pf = 1 cf = 0
   106                                  
   107                                  
   108                                  ;===== Define constants ====================================================================================================================================================
   109                                  ;Set constants via assembler directives
   110                                  %define qwordsize 8                     ;8 bytes
   111                                  %define cmask 00000001h                 ;Carry mask
   112                                  %define pmask 00000004h                 ;Parity mask
   113                                  %define amask 00000010h                 ;Auxiliary mask
   114                                  %define zmask 00000040h                 ;Zero mask
   115                                  %define smask 00000080h                 ;Sign mask
   116                                  %define dmask 00000400h                 ;Not used
   117                                  %define omask 00000800h                 ;Overflow mask
   118                                  
   119                                  
   120                                  extern printf                                               ;printf will be available to the linker in a binary format
   121                                  
   122                                  global showregisterssubprogram                              ;Make this subprogram callable from outside this file
   123                                  
   124                                  segment .data                                               ;This segment declares initialized data
   125                                  
   126 00000000 526567697374657220-     showregisterssubprogram.registerformat1 db "Register Dump # %ld", 10,
   127 00000009 44756D70202320256C-
   128 00000012 640A               
   129 00000014 726178203D20253031-                                             db "rax = %016lx rbx = %016lx rcx = %016lx rdx = %016lx", 10,
   130 0000001D 366C7820726278203D-
   131 00000026 20253031366C782072-
   132 0000002F 6378203D2025303136-
   133 00000038 6C7820726478203D20-
   134 00000041 253031366C780A     
   135 00000048 727369203D20253031-                                             db "rsi = %016lx rdi = %016lx rbp = %016lx rsp = %016lx", 10, 0
   136 00000051 366C7820726469203D-
   137 0000005A 20253031366C782072-
   138 00000063 6270203D2025303136-
   139 0000006C 6C7820727370203D20-
   140 00000075 253031366C780A00   
   141                                  
   142 0000007D 723820203D20253031-     showregisterssubprogram.registerformat2 db "r8  = %016lx r9  = %016lx r10 = %016lx r11 = %016lx", 10,
   143 00000086 366C7820723920203D-
   144 0000008F 20253031366C782072-
   145 00000098 3130203D2025303136-
   146 000000A1 6C7820723131203D20-
   147 000000AA 253031366C780A     
   148 000000B1 723132203D20253031-                                             db "r12 = %016lx r13 = %016lx r14 = %016lx r15 = %016lx", 10, 0
   149 000000BA 366C7820723133203D-
   150 000000C3 20253031366C782072-
   151 000000CC 3134203D2025303136-
   152 000000D5 6C7820723135203D20-
   153 000000DE 253031366C780A00   
   154                                  
   155 000000E6 726970203D20253031-     showregisterssubprogram.registerformat3 db "rip = %016lx", 10, "rflags = %016lx ",
   156 000000EF 366C780A72666C6167-
   157 000000F8 73203D20253031366C-
   158 00000101 7820               
   159 00000103 6F66203D2025317820-                                             db "of = %1x sf = %1x zf = %1x af = %1x pf = %1x cf = %1x", 10, 0
   160 0000010C 7366203D2025317820-
   161 00000115 7A66203D2025317820-
   162 0000011E 6166203D2025317820-
   163 00000127 7066203D2025317820-
   164 00000130 6366203D202531780A-
   165 00000139 00                 
   166                                  
   167 0000013A 257300                  showregisterssubprogram.xsavenotsupported.stringformat db "%s", 0
   168                                  
   169 0000013D 546865207873617665-     showregisterssubprogram.xsavenotsupported.notsupportedmessage db "The xsave instruction and the xrstor instruction are not supported in this microprocessor.", 10
   170 00000146 20696E737472756374-
   171 0000014F 696F6E20616E642074-
   172 00000158 686520787273746F72-
   173 00000161 20696E737472756374-
   174 0000016A 696F6E20617265206E-
   175 00000173 6F7420737570706F72-
   176 0000017C 74656420696E207468-
   177 00000185 6973206D6963726F70-
   178 0000018E 726F636573736F722E-
   179 00000197 0A                 
   180 00000198 486F77657665722C20-                                                                   db "However, showregisters will continue without backing up state component data.", 10, 0
   181 000001A1 73686F777265676973-
   182 000001AA 746572732077696C6C-
   183 000001B3 20636F6E74696E7565-
   184 000001BC 20776974686F757420-
   185 000001C5 6261636B696E672075-
   186 000001CE 702073746174652063-
   187 000001D7 6F6D706F6E656E7420-
   188 000001E0 646174612E0A00     
   189                                  
   190                                  segment .bss                                                ;Declare uninitialized arrays in this segment
   191                                  
   192                                  align 64                                                    ;The next data object must begin on a 64-byte boundary.
   193 00000000 <res 00000340>          showregisterssubprogram.backuparea resb 832                 ;Declare an array of sufficient size to hold all data from state components 0, 1, and 2.
   194                                  
   195                                  segment .text                                               ;Executable instruction are in this segment
   196                                  
   197                                  showregisterssubprogram:                                    ;Execution begins here
   198                                  
   199                                  ;=========== Back up all the GPRs whether used in this program or not ======================================================================================================
   200                                  
   201 00000000 55                      push       rbp                                              ;Save a copy of the stack base pointer
   202 00000001 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
   203 00000004 50                      push       rax                                              ;This is a special case: typically rax is not backed up.
   204 00000005 53                      push       rbx                                              ;Back up rbx
   205 00000006 51                      push       rcx                                              ;Back up rcx
   206 00000007 52                      push       rdx                                              ;Back up rdx
   207 00000008 56                      push       rsi                                              ;Back up rsi
   208 00000009 57                      push       rdi                                              ;Back up rdi
   209 0000000A 4150                    push       r8                                               ;Back up r8
   210 0000000C 4151                    push       r9                                               ;Back up r9
   211 0000000E 4152                    push       r10                                              ;Back up r10
   212 00000010 4153                    push       r11                                              ;Back up r11
   213 00000012 4154                    push       r12                                              ;Back up r12
   214 00000014 4155                    push       r13                                              ;Back up r13
   215 00000016 4156                    push       r14                                              ;Back up r14
   216 00000018 4157                    push       r15                                              ;Back up r15
   217 0000001A 9C                      pushf                                                       ;Back up rflags
   218                                  
   219                                  
   220                                  ;===========================================================================================================================================================================
   221                                  ;===== Begin State Component Backup ========================================================================================================================================
   222                                  ;===========================================================================================================================================================================
   223                                  
   224                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor =========================================================================================
   225                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
   226                                  ;Preconditions: rax holds 1.
   227 0000001B B801000000              mov        rax, 1
   228                                  
   229                                  ;Execute the cpuid instruction
   230 00000020 0FA2                    cpuid
   231                                  
   232                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
   233                                  
   234                                  ;=========== Extract bit #26 and test it ===================================================================================================================================
   235                                  
   236 00000022 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
   237                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
   238 00000029 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
   239 0000002D 742A                    je         .xsavenotsupported                               ;Skip the section that backs up state component data.
   240                                  
   241                                  ;========== Call the function to obtain the bitmap of state components =====================================================================================================
   242                                  
   243                                  ;Preconditions
   244 0000002F B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   245 00000034 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   246                                  
   247                                  ;Call the function
   248 00000039 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
   249                                  
   250                                  ;Postconditions (There are 2 of these):
   251                                  
   252                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
   253                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
   254                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
   255                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
   256                                  ;Therefore, the value in ecx will be less than or equal to 832.
   257                                  
   258                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
   259                                  ;allow only 3 state components maximum.
   260                                  
   261 0000003B 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
   262 00000041 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
   263 00000044 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
   264 0000004A 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
   265                                  
   266                                  ;========== Save all the data of all three components except GPRs ==========================================================================================================
   267                                  
   268                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
   269                                  
   270                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
   271 0000004D 0FAE2425[00000000]      xsave      [.backuparea]                                    ;All the data of state components managed by xsave have been written to backuparea.
   272                                  
   273 00000055 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
   274 00000057 EB20                    jmp        .startapplication                                ;Jump past the message stating "The xsav instruction is not supported"
   275                                  
   276                                  ;========== Show message xsave is not supported on this platform ===========================================================================================================
   277                                  showregisterssubprogram.xsavenotsupported:
   278                                  
   279 00000059 B800000000              mov        rax, 0                                           ;The zero value indicates that no floating values will be outputted by printf.
   280 0000005E 48BF-                   mov        rdi, .stringformat                               ;"%s"
   281 00000060 [3A01000000000000] 
   282 00000068 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not supported in this microprocessor...."
   283 0000006A [3D01000000000000] 
   284 00000072 E8(00000000)            call       printf
   285                                  
   286 00000077 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
   287                                  
   288                                  ;===========================================================================================================================================================================
   289                                  ;===== End of State Component Backup =======================================================================================================================================
   290                                  ;===========================================================================================================================================================================
   291                                  
   292                                  ;===========================================================================================================================================================================
   293                                  showregisterssubprogram.startapplication: ;===== Begin the application here: Show the General Purpose Registers ============================================================
   294                                  ;===========================================================================================================================================================================
   295                                  
   296                                  ;===== State of the internal stack at this time ============================================================================================================================
   297                                  
   298                                  ;              |---------------------------|
   299                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   300                                  ;              |---------------------------|
   301                                  ;     rsp+18*8 | arbitrary number from user|
   302                                  ;              |---------------------------|
   303                                  ;     rsp+17*8 | return address            |
   304                                  ;              |---------------------------|
   305                                  ;     rsp+16*8 | rbp                       |
   306                                  ;              |---------------------------|
   307                                  ;     rsp+15*8 | rax                       |
   308                                  ;              |---------------------------|
   309                                  ;     rsp+14*8 | rbx                       |
   310                                  ;              |---------------------------|
   311                                  ;     rsp+13*8 | rcx                       |
   312                                  ;              |---------------------------|
   313                                  ;     rsp+12*8 | rdx                       |
   314                                  ;              |---------------------------|
   315                                  ;     rsp+11*8 | rsi                       |
   316                                  ;              |---------------------------|
   317                                  ;     rsp+10*8 | rdi                       |
   318                                  ;              |---------------------------|
   319                                  ;     rsp+9*8  | r8                        |
   320                                  ;              |---------------------------|
   321                                  ;     rsp+8*8  | r9                        |
   322                                  ;              |---------------------------|
   323                                  ;     rsp+7*8  | r10                       |
   324                                  ;              |---------------------------|
   325                                  ;     rsp+6*8  | r11                       |
   326                                  ;              |---------------------------|
   327                                  ;     rsp+5*8  | r12                       |
   328                                  ;              |---------------------------|
   329                                  ;     rsp+4*8  | r13                       |
   330                                  ;              |---------------------------|
   331                                  ;     rsp+3*8  | r14                       |
   332                                  ;              |---------------------------|
   333                                  ;     rsp+2*8  | r15                       |
   334                                  ;              |---------------------------|
   335                                  ;     rsp+1*8  | rflags                    |
   336                                  ;              |---------------------------|
   337                                  ;     rsp      | flag either -1 or 0       |
   338                                  ;              |---------------------------|
   339                                  ;
   340 00000079 4889E0                  mov        rax, rsp                                         ;Copy top of stack to an available register where it can be modified without damage to the true top of stack.
   341 0000007C 480598000000            add        rax, 152                                         ;152=19*8.  rax holds address of top of stack at the instant before this program showregisters was called.
   342 00000082 50                      push       rax                                              ;The top of stack holds the top of the stack address when showregisters was called.
   343                                  
   344                                  ;===== State of the internal stack at this time ============================================================================================================================
   345                                  
   346                                  ;              |---------------------------|
   347                                  ;     rsp+20*8 | unknown                   |
   348                                  ;              |---------------------------|
   349                                  ;     rsp+19*8 | arbitrary number from user|
   350                                  ;              |---------------------------|
   351                                  ;     rsp+18*8 | return address            |
   352                                  ;              |---------------------------|
   353                                  ;     rsp+17*8 | rbp                       |
   354                                  ;              |---------------------------|
   355                                  ;     rsp+16*8 | rax                       |
   356                                  ;              |---------------------------|
   357                                  ;     rsp+15*8 | rbx                       |
   358                                  ;              |---------------------------|
   359                                  ;     rsp+14*8 | rcx                       |
   360                                  ;              |---------------------------|
   361                                  ;     rsp+13*8 | rdx                       |
   362                                  ;              |---------------------------|
   363                                  ;     rsp+12*8 | rsi                       |
   364                                  ;              |---------------------------|
   365                                  ;     rsp+11*8 | rdi                       |
   366                                  ;              |---------------------------|
   367                                  ;     rsp+10*8 | r8                        |
   368                                  ;              |---------------------------|
   369                                  ;     rsp+9*8  | r9                        |
   370                                  ;              |---------------------------|
   371                                  ;     rsp+8*8  | r10                       |
   372                                  ;              |---------------------------|
   373                                  ;     rsp+7*8  | r11                       |
   374                                  ;              |---------------------------|
   375                                  ;     rsp+6*8  | r12                       |
   376                                  ;              |---------------------------|
   377                                  ;     rsp+5*8  | r13                       |
   378                                  ;              |---------------------------|
   379                                  ;     rsp+4*8  | r14                       |
   380                                  ;              |---------------------------|
   381                                  ;     rsp+3*8  | r15                       |
   382                                  ;              |---------------------------|
   383                                  ;     rsp+2*8  | rflags                    |
   384                                  ;              |---------------------------|
   385                                  ;     rsp+1*8  | flag either -1 or 0       |
   386                                  ;              |---------------------------|
   387                                  ;     rsp      | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   388                                  ;              |---------------------------|
   389                                  
   390 00000083 488B842488000000        mov        rax, [rsp+17*8]                                  ;Copy the original rbp to an available register.
   391 0000008B 50                      push       rax                                              ;Push the original rbp onto the stack.
   392                                  
   393                                  ;===== State of the internal stack at this time ============================================================================================================================
   394                                  
   395                                  ;              |---------------------------|
   396                                  ;     rsp+21*8 | unknown                   |
   397                                  ;              |---------------------------|
   398                                  ;     rsp+20*8 | arbitrary number from user|
   399                                  ;              |---------------------------|
   400                                  ;     rsp+19*8 | return address            |
   401                                  ;              |---------------------------|
   402                                  ;     rsp+18*8 | rbp                       |
   403                                  ;              |---------------------------|
   404                                  ;     rsp+17*8 | rax                       |
   405                                  ;              |---------------------------|
   406                                  ;     rsp+16*8 | rbx                       |
   407                                  ;              |---------------------------|
   408                                  ;     rsp+15*8 | rcx                       |
   409                                  ;              |---------------------------|
   410                                  ;     rsp+14*8 | rdx                       |
   411                                  ;              |---------------------------|
   412                                  ;     rsp+13*8 | rsi                       |
   413                                  ;              |---------------------------|
   414                                  ;     rsp+12*8 | rdi                       |
   415                                  ;              |---------------------------|
   416                                  ;     rsp+11*8 | r8                        |
   417                                  ;              |---------------------------|
   418                                  ;     rsp+10*8 | r9                        |
   419                                  ;              |---------------------------|
   420                                  ;     rsp+9*8  | r10                       |
   421                                  ;              |---------------------------|
   422                                  ;     rsp+8*8  | r11                       |
   423                                  ;              |---------------------------|
   424                                  ;     rsp+7*8  | r12                       |
   425                                  ;              |---------------------------|
   426                                  ;     rsp+6*8  | r13                       |
   427                                  ;              |---------------------------|
   428                                  ;     rsp+5*8  | r14                       |
   429                                  ;              |---------------------------|
   430                                  ;     rsp+4*8  | r15                       |
   431                                  ;              |---------------------------|
   432                                  ;     rsp+3*8  | rflags                    |
   433                                  ;              |---------------------------|
   434                                  ;     rsp+2*8  | flag either -1 or 0       |
   435                                  ;              |---------------------------|
   436                                  ;     rsp+1*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   437                                  ;              |---------------------------|
   438                                  ;     rsp      | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   439                                  ;              |---------------------------|
   440                                  
   441 0000008C 488B442460              mov        rax, [rsp+12*8]                                  ;Copy the original rdi to an available register.
   442 00000091 50                      push       rax                                              ;Push the original rdi onto the stack.
   443                                  
   444                                  ;===== State of the internal stack at this time ============================================================================================================================
   445                                  
   446                                  ;              |---------------------------|
   447                                  ;     rsp+22*8 | unknown                   |
   448                                  ;              |---------------------------|
   449                                  ;     rsp+21*8 | arbitrary number from user|
   450                                  ;              |---------------------------|
   451                                  ;     rsp+20*8 | return address            |
   452                                  ;              |---------------------------|
   453                                  ;     rsp+19*8 | rbp                       |
   454                                  ;              |---------------------------|
   455                                  ;     rsp+18*8 | rax                       |
   456                                  ;              |---------------------------|
   457                                  ;     rsp+17*8 | rbx                       |
   458                                  ;              |---------------------------|
   459                                  ;     rsp+16*8 | rcx                       |
   460                                  ;              |---------------------------|
   461                                  ;     rsp+15*8 | rdx                       |
   462                                  ;              |---------------------------|
   463                                  ;     rsp+14*8 | rsi                       |
   464                                  ;              |---------------------------|
   465                                  ;     rsp+13*8 | rdi                       |
   466                                  ;              |---------------------------|
   467                                  ;     rsp+12*8 | r8                        |
   468                                  ;              |---------------------------|
   469                                  ;     rsp+11*8 | r9                        |
   470                                  ;              |---------------------------|
   471                                  ;     rsp+10*8 | r10                       |
   472                                  ;              |---------------------------|
   473                                  ;     rsp+9*8  | r11                       |
   474                                  ;              |---------------------------|
   475                                  ;     rsp+8*8  | r12                       |
   476                                  ;              |---------------------------|
   477                                  ;     rsp+7*8  | r13                       |
   478                                  ;              |---------------------------|
   479                                  ;     rsp+6*8  | r14                       |
   480                                  ;              |---------------------------|
   481                                  ;     rsp+5*8  | r15                       |
   482                                  ;              |---------------------------|
   483                                  ;     rsp+4*8  | rflags                    |
   484                                  ;              |---------------------------|
   485                                  ;     rsp+3*8  | flag either -1 or 0       |
   486                                  ;              |---------------------------|
   487                                  ;     rsp+2*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   488                                  ;              |---------------------------|
   489                                  ;     rsp+1*8  | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   490                                  ;              |---------------------------|
   491                                  ;     rsp      | original rdi              |                ;"original rdi" means the value in rdi when showregisters was called.
   492                                  ;              |---------------------------|
   493                                  
   494 00000092 488B442470              mov        rax, [rsp+14*8]                                  ;Copy the original rsi to an available register.
   495 00000097 50                      push       rax                                              ;Push the original rsi onto the stack.
   496                                  
   497                                  ;===== State of the internal stack at this time ============================================================================================================================
   498                                  
   499                                  ;              |---------------------------|
   500                                  ;     rsp+23*8 | unknown                   |
   501                                  ;              |---------------------------|
   502                                  ;     rsp+22*8 | arbitrary number from user|
   503                                  ;              |---------------------------|
   504                                  ;     rsp+21*8 | return address            |
   505                                  ;              |---------------------------|
   506                                  ;     rsp+20*8 | rbp                       |
   507                                  ;              |---------------------------|
   508                                  ;     rsp+19*8 | rax                       |
   509                                  ;              |---------------------------|
   510                                  ;     rsp+18*8 | rbx                       |
   511                                  ;              |---------------------------|
   512                                  ;     rsp+17*8 | rcx                       |
   513                                  ;              |---------------------------|
   514                                  ;     rsp+16*8 | rdx                       |
   515                                  ;              |---------------------------|
   516                                  ;     rsp+15*8 | rsi                       |
   517                                  ;              |---------------------------|
   518                                  ;     rsp+14*8 | rdi                       |
   519                                  ;              |---------------------------|
   520                                  ;     rsp+13*8 | r8                        |
   521                                  ;              |---------------------------|
   522                                  ;     rsp+12*8 | r9                        |
   523                                  ;              |---------------------------|
   524                                  ;     rsp+11*8 | r10                       |
   525                                  ;              |---------------------------|
   526                                  ;     rsp+10*8 | r11                       |
   527                                  ;              |---------------------------|
   528                                  ;     rsp+9*8  | r12                       |
   529                                  ;              |---------------------------|
   530                                  ;     rsp+8*8  | r13                       |
   531                                  ;              |---------------------------|
   532                                  ;     rsp+7*8  | r14                       |
   533                                  ;              |---------------------------|
   534                                  ;     rsp+6*8  | r15                       |
   535                                  ;              |---------------------------|
   536                                  ;     rsp+5*8  | rflags                    |
   537                                  ;              |---------------------------|
   538                                  ;     rsp+4*8  | flag either -1 or 0       |
   539                                  ;              |---------------------------|
   540                                  ;     rsp+3*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   541                                  ;              |---------------------------|
   542                                  ;     rsp+2*8  | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   543                                  ;              |---------------------------|
   544                                  ;     rsp+1*8  | original rdi              |                ;"original rdi" means the value in rdi when showregisters was called.
   545                                  ;              |---------------------------|
   546                                  ;     rsp      | original rsi              |                ;"original rsi" means the value in rsi when showregisters was called.
   547                                  ;              |---------------------------|
   548                                  
   549 00000098 4C8B8C2480000000        mov        r9, [rsp+16*8]                                   ;Copy the original rdx to r9, which is the 6th CCC parameter
   550 000000A0 4C8B842488000000        mov        r8, [rsp+17*8]                                   ;Copy the original rcx to r8, which is the 5th CCC parameter
   551 000000A8 488B8C2490000000        mov        rcx, [rsp+18*8]                                  ;Copy the original rbx to rcx, which is the 4th CCC parameter
   552 000000B0 488B942498000000        mov        rdx, [rsp+19*8]
   553 000000B8 488BB424B0000000        mov        rsi, [rsp+22*8]
   554 000000C0 48BF-                   mov        rdi, showregisterssubprogram.registerformat1
   555 000000C2 [0000000000000000] 
   556 000000CA B800000000              mov        rax, 0                                           ;The value in rax signals to printf the number of floating point values to be outputted.
   557 000000CF E8(00000000)            call       printf
   558                                  
   559 000000D4 58                      pop        rax                                              ;Remove and discard original rsi from the stack
   560 000000D5 58                      pop        rax                                              ;Remove and discard original rdi from the stack
   561 000000D6 58                      pop        rax                                              ;Remove and discard original rbp from the stack
   562 000000D7 58                      pop        rax                                              ;Remove and discard original rsp from the stack
   563                                  
   564                                  ;===== State of the internal stack at this time ============================================================================================================================
   565                                  
   566                                  ;              |---------------------------|
   567                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   568                                  ;              |---------------------------|
   569                                  ;     rsp+18*8 | arbitrary number from user|
   570                                  ;              |---------------------------|
   571                                  ;     rsp+17*8 | return address            |
   572                                  ;              |---------------------------|
   573                                  ;     rsp+16*8 | rbp                       |
   574                                  ;              |---------------------------|
   575                                  ;     rsp+15*8 | rax                       |
   576                                  ;              |---------------------------|
   577                                  ;     rsp+14*8 | rbx                       |
   578                                  ;              |---------------------------|
   579                                  ;     rsp+13*8 | rcx                       |
   580                                  ;              |---------------------------|
   581                                  ;     rsp+12*8 | rdx                       |
   582                                  ;              |---------------------------|
   583                                  ;     rsp+11*8 | rsi                       |
   584                                  ;              |---------------------------|
   585                                  ;     rsp+10*8 | rdi                       |
   586                                  ;              |---------------------------|
   587                                  ;     rsp+9*8  | r8                        |
   588                                  ;              |---------------------------|
   589                                  ;     rsp+8*8  | r9                        |
   590                                  ;              |---------------------------|
   591                                  ;     rsp+7*8  | r10                       |
   592                                  ;              |---------------------------|
   593                                  ;     rsp+6*8  | r11                       |
   594                                  ;              |---------------------------|
   595                                  ;     rsp+5*8  | r12                       |
   596                                  ;              |---------------------------|
   597                                  ;     rsp+4*8  | r13                       |
   598                                  ;              |---------------------------|
   599                                  ;     rsp+3*8  | r14                       |
   600                                  ;              |---------------------------|
   601                                  ;     rsp+2*8  | r15                       |
   602                                  ;              |---------------------------|
   603                                  ;     rsp+1*8  | rflags                    |
   604                                  ;              |---------------------------|
   605                                  ;     rsp      | flag either -1 or 0       |
   606                                  ;              |---------------------------|
   607                                  
   608 000000D8 488B442410              mov        rax, [rsp+2*8]                                   ;Copy the original value of r15 to an available register.
   609 000000DD 50                      push       rax                                              ;Push the original value of r15 onto the stack.
   610                                  
   611                                  ;===== State of the internal stack at this time ============================================================================================================================
   612                                  
   613                                  ;              |---------------------------|
   614                                  ;     rsp+20*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   615                                  ;              |---------------------------|
   616                                  ;     rsp+19*8 | arbitrary number from user|
   617                                  ;              |---------------------------|
   618                                  ;     rsp+18*8 | return address            |
   619                                  ;              |---------------------------|
   620                                  ;     rsp+17*8 | rbp                       |
   621                                  ;              |---------------------------|
   622                                  ;     rsp+16*8 | rax                       |
   623                                  ;              |---------------------------|
   624                                  ;     rsp+15*8 | rbx                       |
   625                                  ;              |---------------------------|
   626                                  ;     rsp+14*8 | rcx                       |
   627                                  ;              |---------------------------|
   628                                  ;     rsp+13*8 | rdx                       |
   629                                  ;              |---------------------------|
   630                                  ;     rsp+12*8 | rsi                       |
   631                                  ;              |---------------------------|
   632                                  ;     rsp+11*8 | rdi                       |
   633                                  ;              |---------------------------|
   634                                  ;     rsp+10*8 | r8                        |
   635                                  ;              |---------------------------|
   636                                  ;     rsp+9*8  | r9                        |
   637                                  ;              |---------------------------|
   638                                  ;     rsp+8*8  | r10                       |
   639                                  ;              |---------------------------|
   640                                  ;     rsp+7*8  | r11                       |
   641                                  ;              |---------------------------|
   642                                  ;     rsp+6*8  | r12                       |
   643                                  ;              |---------------------------|
   644                                  ;     rsp+5*8  | r13                       |
   645                                  ;              |---------------------------|
   646                                  ;     rsp+4*8  | r14                       |
   647                                  ;              |---------------------------|
   648                                  ;     rsp+3*8  | r15                       |
   649                                  ;              |---------------------------|
   650                                  ;     rsp+2*8  | rflags                    |
   651                                  ;              |---------------------------|
   652                                  ;     rsp+1*8  | flag either -1 or 0       |
   653                                  ;              |---------------------------|
   654                                  ;     rsp      | original r15              |
   655                                  ;              |---------------------------|
   656                                  
   657 000000DE 488B442420              mov        rax, [rsp+4*8]                                   ;Copy the original value of r14 to an available register.
   658 000000E3 50                      push       rax                                              ;Push the original value of r14 onto the stack.
   659                                  
   660                                  ;===== State of the internal stack at this time ============================================================================================================================
   661                                  
   662                                  ;              |---------------------------|
   663                                  ;     rsp+21*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   664                                  ;              |---------------------------|
   665                                  ;     rsp+20*8 | arbitrary number from user|
   666                                  ;              |---------------------------|
   667                                  ;     rsp+19*8 | return address            |
   668                                  ;              |---------------------------|
   669                                  ;     rsp+18*8 | rbp                       |
   670                                  ;              |---------------------------|
   671                                  ;     rsp+17*8 | rax                       |
   672                                  ;              |---------------------------|
   673                                  ;     rsp+16*8 | rbx                       |
   674                                  ;              |---------------------------|
   675                                  ;     rsp+15*8 | rcx                       |
   676                                  ;              |---------------------------|
   677                                  ;     rsp+14*8 | rdx                       |
   678                                  ;              |---------------------------|
   679                                  ;     rsp+13*8 | rsi                       |
   680                                  ;              |---------------------------|
   681                                  ;     rsp+12*8 | rdi                       |
   682                                  ;              |---------------------------|
   683                                  ;     rsp+11*8 | r8                        |
   684                                  ;              |---------------------------|
   685                                  ;     rsp+10*8 | r9                        |
   686                                  ;              |---------------------------|
   687                                  ;     rsp+9*8  | r10                       |
   688                                  ;              |---------------------------|
   689                                  ;     rsp+8*8  | r11                       |
   690                                  ;              |---------------------------|
   691                                  ;     rsp+7*8  | r12                       |
   692                                  ;              |---------------------------|
   693                                  ;     rsp+6*8  | r13                       |
   694                                  ;              |---------------------------|
   695                                  ;     rsp+5*8  | r14                       |
   696                                  ;              |---------------------------|
   697                                  ;     rsp+4*8  | r15                       |
   698                                  ;              |---------------------------|
   699                                  ;     rsp+3*8  | rflags                    |
   700                                  ;              |---------------------------|
   701                                  ;     rsp+2*8  | flag either -1 or 0       |
   702                                  ;              |---------------------------|
   703                                  ;     rsp+1*8  | original r15              |
   704                                  ;              |---------------------------|
   705                                  ;     rsp      | original r14              |
   706                                  ;              |---------------------------|
   707                                  
   708 000000E4 488B442430              mov        rax, [rsp+6*8]
   709 000000E9 50                      push       rax
   710                                  
   711                                  ;===== State of the internal stack at this time ============================================================================================================================
   712                                  
   713                                  ;              |---------------------------|
   714                                  ;     rsp+22*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   715                                  ;              |---------------------------|
   716                                  ;     rsp+21*8 | arbitrary number from user|
   717                                  ;              |---------------------------|
   718                                  ;     rsp+20*8 | return address            |
   719                                  ;              |---------------------------|
   720                                  ;     rsp+19*8 | rbp                       |
   721                                  ;              |---------------------------|
   722                                  ;     rsp+18*8 | rax                       |
   723                                  ;              |---------------------------|
   724                                  ;     rsp+17*8 | rbx                       |
   725                                  ;              |---------------------------|
   726                                  ;     rsp+16*8 | rcx                       |
   727                                  ;              |---------------------------|
   728                                  ;     rsp+15*8 | rdx                       |
   729                                  ;              |---------------------------|
   730                                  ;     rsp+14*8 | rsi                       |
   731                                  ;              |---------------------------|
   732                                  ;     rsp+13*8 | rdi                       |
   733                                  ;              |---------------------------|
   734                                  ;     rsp+12*8 | r8                        |
   735                                  ;              |---------------------------|
   736                                  ;     rsp+11*8 | r9                        |
   737                                  ;              |---------------------------|
   738                                  ;     rsp+10*8 | r10                       |
   739                                  ;              |---------------------------|
   740                                  ;     rsp+9*8  | r11                       |
   741                                  ;              |---------------------------|
   742                                  ;     rsp+8*8  | r12                       |
   743                                  ;              |---------------------------|
   744                                  ;     rsp+7*8  | r13                       |
   745                                  ;              |---------------------------|
   746                                  ;     rsp+6*8  | r14                       |
   747                                  ;              |---------------------------|
   748                                  ;     rsp+5*8  | r15                       |
   749                                  ;              |---------------------------|
   750                                  ;     rsp+4*8  | rflags                    |
   751                                  ;              |---------------------------|
   752                                  ;     rsp+3*8  | flag either -1 or 0       |
   753                                  ;              |---------------------------|
   754                                  ;     rsp+2*8  | original r15              |
   755                                  ;              |---------------------------|
   756                                  ;     rsp+1*8  | original r14              |
   757                                  ;              |---------------------------|
   758                                  ;     rsp      | original r13              |
   759                                  ;              |---------------------------|
   760                                  
   761 000000EA 4C8B4C2440              mov        r9, [rsp+8*8]
   762 000000EF 4C8B442448              mov        r8, [rsp+9*8]
   763 000000F4 488B4C2450              mov        rcx, [rsp+10*8]
   764 000000F9 488B542458              mov        rdx, [rsp+11*8]
   765 000000FE 488B742460              mov        rsi, [rsp+12*8]
   766 00000103 48BF-                   mov        rdi, showregisterssubprogram.registerformat2
   767 00000105 [7D00000000000000] 
   768 0000010D B800000000              mov        rax, 0
   769 00000112 E8(00000000)            call       printf
   770                                  
   771 00000117 58                      pop        rax                                              ;Remove and discard original r13 from the stack
   772 00000118 58                      pop        rax                                              ;Remove and discard original r14 from the stack
   773 00000119 58                      pop        rax                                              ;Remove and discard original r15 from the stack
   774                                  
   775                                  ;===== State of the internal stack at this time ============================================================================================================================
   776                                  
   777                                  ;              |---------------------------|
   778                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   779                                  ;              |---------------------------|
   780                                  ;     rsp+18*8 | arbitrary number from user|
   781                                  ;              |---------------------------|
   782                                  ;     rsp+17*8 | return address            |
   783                                  ;              |---------------------------|
   784                                  ;     rsp+16*8 | rbp                       |
   785                                  ;              |---------------------------|
   786                                  ;     rsp+15*8 | rax                       |
   787                                  ;              |---------------------------|
   788                                  ;     rsp+14*8 | rbx                       |
   789                                  ;              |---------------------------|
   790                                  ;     rsp+13*8 | rcx                       |
   791                                  ;              |---------------------------|
   792                                  ;     rsp+12*8 | rdx                       |
   793                                  ;              |---------------------------|
   794                                  ;     rsp+11*8 | rsi                       |
   795                                  ;              |---------------------------|
   796                                  ;     rsp+10*8 | rdi                       |
   797                                  ;              |---------------------------|
   798                                  ;     rsp+9*8  | r8                        |
   799                                  ;              |---------------------------|
   800                                  ;     rsp+8*8  | r9                        |
   801                                  ;              |---------------------------|
   802                                  ;     rsp+7*8  | r10                       |
   803                                  ;              |---------------------------|
   804                                  ;     rsp+6*8  | r11                       |
   805                                  ;              |---------------------------|
   806                                  ;     rsp+5*8  | r12                       |
   807                                  ;              |---------------------------|
   808                                  ;     rsp+4*8  | r13                       |
   809                                  ;              |---------------------------|
   810                                  ;     rsp+3*8  | r14                       |
   811                                  ;              |---------------------------|
   812                                  ;     rsp+2*8  | r15                       |
   813                                  ;              |---------------------------|
   814                                  ;     rsp+1*8  | rflags                    |
   815                                  ;              |---------------------------|
   816                                  ;     rsp      | flag either -1 or 0       |
   817                                  ;              |---------------------------|
   818                                  
   819                                  ;===== Output the sixth and seventh lines of the register dump =============================================================================================================
   820                                  
   821                                  ;At this time the original value of rflags is at rsp+8, which is second quadword from the top.
   822                                  
   823                                  ;Go into the stack and get a copy of that original rflags
   824 0000011A 488B5C2408              mov qword rbx, [rsp+8]                                      ;Now rbx contain a copy of rflags.
   825                                  
   826                                  ;First part of CCC-64 parameter-passing protocol setup: do the pushes for the right most parameters
   827                                  ;Begin process to extract the cf bit, which is bit #0 from the right.
   828 0000011F 4889D8                  mov rax, rbx                                                ;Place a copy of rflags into rax
   829 00000122 4883E001                and rax, cmask                                              ;rax has all zero bits except possibly position 0.
   830 00000126 50                      push qword rax                                              ;Count: push #1 of this section
   831                                  
   832                                  ;Begin process to extract the pf bit
   833 00000127 4889D8                  mov rax, rbx                                                ;Place a new copy of rflags into rax
   834 0000012A 4883E004                and rax, pmask                                              ;rax has all zero bits except possible position 2
   835 0000012E 48C1E802                shr rax, 2                                                  ;The pf bit is bit #2 from the right.
   836 00000132 50                      push qword rax                                              ;Count: push #2 of this section
   837                                  
   838                                  ;Begin process to extract the af bit
   839 00000133 4889D8                  mov rax, rbx
   840 00000136 4883E010                and rax, amask
   841 0000013A 48C1E804                shr rax, 4                                                  ;The af bit is bit #4 from the right.
   842 0000013E 50                      push qword rax                                              ;Count: push #3 of this section
   843                                  
   844                                  ;===== State of the internal stack at this time ============================================================================================================================
   845                                  
   846                                  ;              |---------------------------|
   847                                  ;     rsp+22*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   848                                  ;              |---------------------------|
   849                                  ;     rsp+21*8 | arbitrary number from user|
   850                                  ;              |---------------------------|
   851                                  ;     rsp+20*8 | return address            |
   852                                  ;              |---------------------------|
   853                                  ;     rsp+19*8 | rbp                       |
   854                                  ;              |---------------------------|
   855                                  ;     rsp+18*8 | rax                       |
   856                                  ;              |---------------------------|
   857                                  ;     rsp+17*8 | rbx                       |
   858                                  ;              |---------------------------|
   859                                  ;     rsp+16*8 | rcx                       |
   860                                  ;              |---------------------------|
   861                                  ;     rsp+15*8 | rdx                       |
   862                                  ;              |---------------------------|
   863                                  ;     rsp+14*8 | rsi                       |
   864                                  ;              |---------------------------|
   865                                  ;     rsp+13*8 | rdi                       |
   866                                  ;              |---------------------------|
   867                                  ;     rsp+12*8 | r8                        |
   868                                  ;              |---------------------------|
   869                                  ;     rsp+11*8 | r9                        |
   870                                  ;              |---------------------------|
   871                                  ;     rsp+10*8 | r10                       |
   872                                  ;              |---------------------------|
   873                                  ;     rsp+9*8  | r11                       |
   874                                  ;              |---------------------------|
   875                                  ;     rsp+8*8  | r12                       |
   876                                  ;              |---------------------------|
   877                                  ;     rsp+7*8  | r13                       |
   878                                  ;              |---------------------------|
   879                                  ;     rsp+6*8  | r14                       |
   880                                  ;              |---------------------------|
   881                                  ;     rsp+5*8  | r15                       |
   882                                  ;              |---------------------------|
   883                                  ;     rsp+4*8  | rflags                    |
   884                                  ;              |---------------------------|
   885                                  ;     rsp+3*8  | flag either -1 or 0       |
   886                                  ;              |---------------------------|
   887                                  ;     rsp+2*8  | cf bit                    |
   888                                  ;              |---------------------------|
   889                                  ;     rsp+1*8  | pf bit                    |
   890                                  ;              |---------------------------|
   891                                  ;     rsp      | af bit                    |
   892                                  ;              |---------------------------|
   893                                  
   894                                  ;Second part of CCC-64 parameter-passing protocol setup: move data into the five fixed registers acting as parameters
   895                                  
   896                                  ;Begin process to extract the zf bit: the zero bit
   897 0000013F 4889D8                  mov rax, rbx
   898 00000142 4883E040                and rax, zmask
   899 00000146 48C1E806                shr rax, 6
   900 0000014A 4989C1                  mov qword r9, rax                                           ;Parameter #6 of CCC
   901                                  
   902                                  ;Begin process to extract the sf bit: the sign bit
   903 0000014D 4889D8                  mov rax, rbx
   904 00000150 482580000000            and rax, smask
   905 00000156 48C1E807                shr rax, 7
   906 0000015A 4989C0                  mov qword r8, rax                                           ;Parameter #5 of CCC
   907                                  
   908                                  ;Begin process to extract the of bit: the overflow bit
   909 0000015D 4889D8                  mov rax, rbx
   910 00000160 482500080000            and rax, omask
   911 00000166 48C1E80B                shr rax, 11
   912 0000016A 4889C1                  mov qword rcx, rax                                          ;Parameter #4 of CCC
   913                                  
   914                                  ;Copy the original rflags data to rdx
   915 0000016D 4889DA                  mov qword rdx, rbx                                          ;Parameter #3 of CCC
   916                                  ;
   917                                  ;rip is a highly protected register in the sense that it is the only one providing neither read nor write privileges.  Therefore, the programmer cannot assign a value to
   918                                  ;rip nor read the value in rip.  The one technique to obtain the value stored in rip is to call a subprogram such as this one, showregisterssubprogram.  The call will
   919                                  ;place a copy of rip on the internal stack.  That value can be retrieved later from the internal stack, and that is what is done here.  That value is the address of the
   920                                  ;next instruction to execute when the current subprogram returns.
   921                                  
   922                                  ;Copy the rip at the time this subprogram was called; the copy goes into rsi, which is parameter #2 of CCC
   923 00000170 488BB424A0000000        mov qword rsi, [rsp+20*qwordsize]                           ;We use the return address as the value of rip at the time instantly before showregisters is called.
   924                                  
   925 00000178 48BF-                   mov qword rdi, showregisterssubprogram.registerformat3      ;Parameter #1 of CCC
   926 0000017A [E600000000000000] 
   927                                  
   928                                  ;Third part of the CCC-64 protocol
   929 00000182 B800000000              mov qword rax, 0
   930 00000187 E8(00000000)            call printf
   931                                  
   932                                  ;Reverse the three recent pushes.
   933 0000018C 58                      pop rax                                                     ;Discard the qword containing the af bit
   934 0000018D 58                      pop rax                                                     ;Discard the qword containing the pf bit
   935 0000018E 58                      pop rax                                                     ;Discard the qword containing the cf bit
   936                                  
   937                                  ;===== State of the internal stack at this time ============================================================================================================================
   938                                  
   939                                  ;              |---------------------------|
   940                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   941                                  ;              |---------------------------|
   942                                  ;     rsp+18*8 | arbitrary number from user|
   943                                  ;              |---------------------------|
   944                                  ;     rsp+17*8 | return address            |
   945                                  ;              |---------------------------|
   946                                  ;     rsp+16*8 | rbp                       |
   947                                  ;              |---------------------------|
   948                                  ;     rsp+15*8 | rax                       |
   949                                  ;              |---------------------------|
   950                                  ;     rsp+14*8 | rbx                       |
   951                                  ;              |---------------------------|
   952                                  ;     rsp+13*8 | rcx                       |
   953                                  ;              |---------------------------|
   954                                  ;     rsp+12*8 | rdx                       |
   955                                  ;              |---------------------------|
   956                                  ;     rsp+11*8 | rsi                       |
   957                                  ;              |---------------------------|
   958                                  ;     rsp+10*8 | rdi                       |
   959                                  ;              |---------------------------|
   960                                  ;     rsp+9*8  | r8                        |
   961                                  ;              |---------------------------|
   962                                  ;     rsp+8*8  | r9                        |
   963                                  ;              |---------------------------|
   964                                  ;     rsp+7*8  | r10                       |
   965                                  ;              |---------------------------|
   966                                  ;     rsp+6*8  | r11                       |
   967                                  ;              |---------------------------|
   968                                  ;     rsp+5*8  | r12                       |
   969                                  ;              |---------------------------|
   970                                  ;     rsp+4*8  | r13                       |
   971                                  ;              |---------------------------|
   972                                  ;     rsp+3*8  | r14                       |
   973                                  ;              |---------------------------|
   974                                  ;     rsp+2*8  | r15                       |
   975                                  ;              |---------------------------|
   976                                  ;     rsp+1*8  | rflags                    |
   977                                  ;              |---------------------------|
   978                                  ;     rsp      | flag either -1 or 0       |
   979                                  ;              |---------------------------|
   980                                  
   981                                  ;===========================================================================================================================================================================
   982                                  ;===== Begin State Component Restore =======================================================================================================================================
   983                                  ;===========================================================================================================================================================================
   984                                  
   985                                  ;===== Check the flag to determine if state components were really backed up ===============================================================================================
   986                                  
   987 0000018F 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
   988                                  
   989 00000190 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
   990 00000194 7426                    je         .restoregprs                                     ;Go to section that restores values to GPRs.
   991                                  
   992                                  ;Continue with restoration of state components;
   993                                  
   994                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
   995                                  
   996                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
   997 00000196 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   998 0000019B B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   999                                  
  1000                                  ;Call the function
  1001 000001A0 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  1002                                  
  1003                                  ;Postcondition: The bitmap in now in edx:eax
  1004                                  
  1005                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
  1006 000001A2 41BF07000000            mov        r15, 7
  1007 000001A8 4C21F8                  and        rax, r15
  1008 000001AB 41BF00000000            mov        r15, 0
  1009 000001B1 4C21FA                  and        rdx, r15
  1010                                  
  1011 000001B4 0FAE2C25[00000000]      xrstor     [showregisterssubprogram.backuparea]
  1012                                  
  1013                                  ;===========================================================================================================================================================================
  1014                                  ;===== End State Component Restore =========================================================================================================================================
  1015                                  ;===========================================================================================================================================================================
  1016                                  
  1017                                  .restoregprs: ;=========== Restore GPR values and return to the caller =====================================================================================================
  1018                                  
  1019 000001BC 9D                      popf                                                        ;Restore rflags
  1020 000001BD 415F                    pop        r15                                              ;Restore r15
  1021 000001BF 415E                    pop        r14                                              ;Restore r14
  1022 000001C1 415D                    pop        r13                                              ;Restore r13
  1023 000001C3 415C                    pop        r12                                              ;Restore r12
  1024 000001C5 415B                    pop        r11                                              ;Restore r11
  1025 000001C7 415A                    pop        r10                                              ;Restore r10
  1026 000001C9 4159                    pop        r9                                               ;Restore r9
  1027 000001CB 4158                    pop        r8                                               ;Restore r8
  1028 000001CD 5F                      pop        rdi                                              ;Restore rdi
  1029 000001CE 5E                      pop        rsi                                              ;Restore rsi
  1030 000001CF 5A                      pop        rdx                                              ;Restore rdx
  1031 000001D0 59                      pop        rcx                                              ;Restore rcx
  1032 000001D1 5B                      pop        rbx                                              ;Restore rbx
  1033 000001D2 58                      pop        rax                                              ;Restore rax
  1034 000001D3 5D                      pop        rbp                                              ;Restore rbp
  1035                                  
  1036                                  ;========== Exit gently from this subprogram ===============================================================================================================================
  1037                                  
  1038                                  ;The instruction "ret n" where n is a positive integer means "pop the stack once to obtain an address X where execution will resume, then add n to rsp effectively popping
  1039                                  ;n number of bytes, then resume execution at the address X".
  1040                                  
  1041 000001D4 C20800                  ret 8                                                       ;Pop the address on top of the stack into rip, and then discard 8 more bytes from the top of the stack.
  1042                                  
  1043                                  ;===========================================================================================================================================================================
  1044                                  ;===== End of program showregisters ========================================================================================================================================
  1045                                  ;===========================================================================================================================================================================
  1046                                  
  1047                                  
  1048                                  
  1049                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  1050                                  
  1051                                  
  1052                                  
  1053                                  ;===========================================================================================================================================================================
  1054                                  ;===== Begin subprogram dumpstack ==========================================================================================================================================
  1055                                  ;===== Begin subprogram dumpstack===========================================================================================================================================
  1056                                  ;===== Begin subprogram dumpstack ==========================================================================================================================================
  1057                                  ;===========================================================================================================================================================================
  1058                                  ;Module information
  1059                                  ;  Author: Floyd Holliday
  1060                                  ;  This module's call name: dumpstacksubprogram
  1061                                  ;  Language: X86-64
  1062                                  ;  Syntax: Intel
  1063                                  ;  Dates last modified: 2014-July-8, 2014-Aug-31
  1064                                  ;  Purpose: This module will show the contents of the system stack including a certain number of quadwords outside the stack and a possibly different number of quadwords
  1065                                  ;  inside the stack.
  1066                                  ;  Status: The present source code is functioning correctly.
  1067                                  ;  Assemble: nasm -f elf64 -l debug.lis -o debug.o debug.asm
  1068                                  ;
  1069                                  ;Concerning the two pointers rbp and rsp.  The system stack, sometimes called the internal stack, is a built-in stack of bytes.  In 64-bit programming we always operate
  1070                                  ;on the stack using quadword operands.  Thus, one can think of this structure as a stack of quadwords.  The pointer rsp always points to the top of the stack.  Use of the ;pointer rbp is optional.  That means that a
  1071                                  ;activation record when a subprogram is called.
  1072                                  ;
  1073                                  ;Important:  This program is built on rbp.  That means this program treats rbp as the top of the stack.  When calling this program it requires three parameters: an 
  1074                                  ;arbitrary integer, the number of qwords outside of the stack to be displayed, and the number of qwords inside the stack to be displayed.  Separator commas are placed
  1075                                  ;after the first and second parameters.  Sample call:  dumpstack 59, 4, 10
  1076                                  
  1077                                  ;===== Sample of expected output from this subprogram ======================================================================================================================
  1078                                  
  1079                                  ;To view the internal stack using rbp as the top use a statement like the following:
  1080                                  ;     dumpstack 20, 2, 6
  1081                                  ;The results will be as in the following:
  1082                                  
  1083                                  ;Stack Dump # 20:  rbp = 00007fff3ab0bba0 rsp = 00007fff3ab0bb50
  1084                                  ;Offset    Address           Value
  1085                                  ;  +48  00007fff3ab0bbd0  0000000000000000
  1086                                  ;  +40  00007fff3ab0bbc8  00000000004006d0
  1087                                  ;  +32  00007fff3ab0bbc0  0000000100000000
  1088                                  ;  +24  00007fff3ab0bbb8  00007fff3ab0bc88
  1089                                  ;  +16  00007fff3ab0bbb0  0000000000000000
  1090                                  ;   +8  00007fff3ab0bba8  00007f318baf376d
  1091                                  ;   +0  00007fff3ab0bba0  0000000000000000
  1092                                  ;   -8  00007fff3ab0bb98  ffffffffffffff9d
  1093                                  ;  -16  00007fff3ab0bb90  00007fff3ab0bc80
  1094                                  
  1095                                  ;To view the internal stack using rsp as the top use a pair of statements like the following:
  1096                                  ;     mov rbp, rsp
  1097                                  ;     dumpstack 21, 2, 6
  1098                                  ;The results will be as in the following example
  1099                                  
  1100                                  ;Stack Dump # 21:  rbp = 00007fffe8e939b0 rsp = 00007fffe8e939b0
  1101                                  ;Offset    Address           Value
  1102                                  ;  +48  00007fffe8e939e0  00007fffe8e93a00
  1103                                  ;  +40  00007fffe8e939d8  00007fffe8e93a00
  1104                                  ;  +32  00007fffe8e939d0  00000000ffffffff
  1105                                  ;  +24  00007fffe8e939c8  00007f804ae98000
  1106                                  ;  +16  00007fffe8e939c0  0000000000000000
  1107                                  ;   +8  00007fffe8e939b8  00000000004004a0
  1108                                  ;   +0  00007fffe8e939b0  00000000ffffffff
  1109                                  ;   -8  00007fffe8e939a8  00007fffe8e939b0
  1110                                  ;  -16  00007fffe8e939a0  00007fffe8e939b0
  1111                                  
  1112                                  ;To view the contents of an array use a pair of statements like the following:
  1113                                  ;    mov rbp, myarray
  1114                                  ;    dumpstack 32, 0, 6
  1115                                  ;The contents of the array will be displayed in 8-bytes segments as in this example:
  1116                                  
  1117                                  ;Stack Dump # 32:  rbp = 0000000000602a28 rsp = 00007fffe8e939b0
  1118                                  ;Offset    Address           Value
  1119                                  ;  +48  0000000000602a58  0000000000000000
  1120                                  ;  +40  0000000000602a50  0000000000000000
  1121                                  ;  +32  0000000000602a48  0000000000000000
  1122                                  ;  +24  0000000000602a40  0000000000000000
  1123                                  ;  +16  0000000000602a38  0000000000000000
  1124                                  ;   +8  0000000000602a30  0000000000004000
  1125                                  ;   +0  0000000000602a28  c90fdaa22168c235
  1126                                  
  1127                                  ;===== Begin code area of showstacksubprogram ==============================================================================================================================
  1128                                  
  1129                                  ;Set constants via assembler directives
  1130                                  %define qwordsize qword 8                                   ;8 bytes
  1131                                  
  1132                                  extern printf
  1133                                  global showstacksubprogram                                  ;This declaration allows the subprogram to be called from outside this file.
  1134                                  
  1135                                  segment .data                                               ;This segment declares initialized data
  1136                                  
  1137 000001E7 537461636B2044756D-     showstacksubprogram.stackheadformat db "Stack Dump # %d:  ", 
  1138 000001F0 7020232025643A2020 
  1139 000001F9 726270203D20253031-                                         db "rbp = %016lx rsp = %016lx", 10, 
  1140 00000202 366C7820727370203D-
  1141 0000020B 20253031366C780A   
  1142 00000213 4F6666736574202020-                                         db "Offset    Address           Value", 10, 0
  1143 0000021C 204164647265737320-
  1144 00000225 202020202020202020-
  1145 0000022E 2056616C75650A00   
  1146                                  
  1147 00000236 252B35642020253031-     showstacksubprogram.stacklineformat db "%+5d  %016lx  %016lx", 10, 0
  1148 0000023F 366C78202025303136-
  1149 00000248 6C780A00           
  1150                                  
  1151 0000024C 546865207873617665-     showstacksubprogram.xsavenotsupported.notsupportedmessage db "The xsave instruction and the xrstor instruction are not supported in this microprocessor.", 10
  1152 00000255 20696E737472756374-
  1153 0000025E 696F6E20616E642074-
  1154 00000267 686520787273746F72-
  1155 00000270 20696E737472756374-
  1156 00000279 696F6E20617265206E-
  1157 00000282 6F7420737570706F72-
  1158 0000028B 74656420696E207468-
  1159 00000294 6973206D6963726F70-
  1160 0000029D 726F636573736F722E-
  1161 000002A6 0A                 
  1162 000002A7 486F77657665722C20-                                                               db "However, dumpstack will continue without backing up state component data.", 10, 0
  1163 000002B0 64756D70737461636B-
  1164 000002B9 2077696C6C20636F6E-
  1165 000002C2 74696E756520776974-
  1166 000002CB 686F7574206261636B-
  1167 000002D4 696E67207570207374-
  1168 000002DD 61746520636F6D706F-
  1169 000002E6 6E656E742064617461-
  1170 000002EF 2E0A00             
  1171                                  
  1172 000002F2 257300                  showstacksubprogram.xsavenotsupported.stringformat db "%s", 0
  1173                                  
  1174                                  segment .bss                                                ;Place un-initialized data here.
  1175                                  
  1176                                  align 64                                                    ;Insure that the next data declaration starts on a 64-byte boundar.
  1177 00000340 <res 00000340>          showstacksubprogram.backuparea resb 832                     ;Create an array for backup storage having 832 bytes.
  1178                                  
  1179                                  segment .text                                               ;Executable instructions appear in this segment
  1180                                  
  1181                                  showstacksubprogram:                                        ;Where execution begins when this program is called.
  1182                                  
  1183                                  ;=========== Back up all the GPRs whether used in this program or not ======================================================================================================
  1184                                  
  1185 000001D7 55                      push       rbp                                              ;Save a copy of the stack base pointer
  1186 000001D8 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
  1187 000001DB 53                      push       rbx                                              ;Back up rbx
  1188 000001DC 51                      push       rcx                                              ;Back up rcx
  1189 000001DD 52                      push       rdx                                              ;Back up rdx
  1190 000001DE 56                      push       rsi                                              ;Back up rsi
  1191 000001DF 57                      push       rdi                                              ;Back up rdi
  1192 000001E0 4150                    push       r8                                               ;Back up r8
  1193 000001E2 4151                    push       r9                                               ;Back up r9
  1194 000001E4 4152                    push       r10                                              ;Back up r10
  1195 000001E6 4153                    push       r11                                              ;Back up r11
  1196 000001E8 4154                    push       r12                                              ;Back up r12
  1197 000001EA 4155                    push       r13                                              ;Back up r13
  1198 000001EC 4156                    push       r14                                              ;Back up r14
  1199 000001EE 4157                    push       r15                                              ;Back up r15
  1200 000001F0 9C                      pushf                                                       ;Back up rflags
  1201                                  
  1202                                  ;===========================================================================================================================================================================
  1203                                  ;===== Begin State Component Backup ========================================================================================================================================
  1204                                  ;===========================================================================================================================================================================
  1205                                  
  1206                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor =========================================================================================
  1207                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
  1208                                  ;Preconditions: rax holds 1.
  1209 000001F1 B801000000              mov        rax, 1
  1210                                  
  1211                                  ;Execute the cpuid instruction
  1212 000001F6 0FA2                    cpuid
  1213                                  
  1214                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
  1215                                  
  1216                                  ;=========== Extract bit #26 and test it ===================================================================================================================================
  1217                                  
  1218 000001F8 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
  1219                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
  1220 000001FF 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
  1221 00000203 742A                    je         .xsavenotsupported                               ;Skip the section that backs up state component data.
  1222                                  
  1223                                  ;========== Call the function to obtain the bitmap of state components =====================================================================================================
  1224                                  
  1225                                  ;Preconditions
  1226 00000205 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  1227 0000020A B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  1228                                  
  1229                                  ;Call the function
  1230 0000020F 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  1231                                  
  1232                                  ;Postconditions (There are 2 of these):
  1233                                  
  1234                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
  1235                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
  1236                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
  1237                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
  1238                                  ;Therefore, the value in ecx will be less than or equal to 832.
  1239                                  
  1240                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
  1241                                  ;allow only 3 state components maximum.
  1242                                  
  1243 00000211 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
  1244 00000217 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
  1245 0000021A 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
  1246 00000220 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
  1247                                  
  1248                                  ;========== Save all the data of all three components except GPRs ==========================================================================================================
  1249                                  
  1250                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
  1251                                  
  1252                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
  1253 00000223 0FAE2425[40030000]      xsave      [.backuparea]                                    ;All the data of state components managed by xsave have been written to backuparea.
  1254                                  
  1255 0000022B 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
  1256 0000022D EB20                    jmp        .startapplication
  1257                                  
  1258                                  ;========== Show message xsave is not supported on this platform ===========================================================================================================
  1259                                  showstacksubprogram.xsavenotsupported:
  1260                                  
  1261 0000022F B800000000              mov        rax, 0
  1262 00000234 48BF-                   mov        rdi, .stringformat
  1263 00000236 [F202000000000000] 
  1264 0000023E 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not suported in this microprocessor...."
  1265 00000240 [4C02000000000000] 
  1266 00000248 E8(00000000)            call       printf
  1267                                  
  1268 0000024D 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
  1269                                  
  1270                                  ;===========================================================================================================================================================================
  1271                                  ;===== End of State Component Backup =======================================================================================================================================
  1272                                  ;===========================================================================================================================================================================
  1273                                  
  1274                                  
  1275                                  ;===========================================================================================================================================================================
  1276                                  showstacksubprogram.startapplication: ;===== Begin the application here: show the system stack =============================================================================
  1277                                  ;===========================================================================================================================================================================
  1278                                  
  1279                                  ;===== Prepare to output the dump stack header =============================================================================================================================
  1280                                  ;At this time the system stack has the following structure.
  1281                                  ;              |---------------------------|
  1282                                  ;     rsp+21*8 | rsp                       |
  1283                                  ;              |---------------------------|
  1284                                  ;     rsp+20*8 | rbp                       |
  1285                                  ;              |---------------------------|
  1286                                  ;     rsp+19*8 | #qwords inside of stack   |
  1287                                  ;              |---------------------------|
  1288                                  ;     rsp+18*8 | #qwords outside of stack  |
  1289                                  ;              |---------------------------|
  1290                                  ;     rsp+17*8 | arbitrary number from user|
  1291                                  ;              |---------------------------|
  1292                                  ;     rsp+16*8 | return address            |
  1293                                  ;              |---------------------------|
  1294                                  ;     rsp+15*8 | rbp                       |
  1295                                  ;              |---------------------------|
  1296                                  ;     rsp+14*8 | rbx                       |
  1297                                  ;              |---------------------------|
  1298                                  ;     rsp+13*8 | rcx                       |
  1299                                  ;              |---------------------------|
  1300                                  ;     rsp+12*8 | rdx                       |
  1301                                  ;              |---------------------------|
  1302                                  ;     rsp+11*8 | rsi                       |
  1303                                  ;              |---------------------------|
  1304                                  ;     rsp+10*8 | rdi                       |
  1305                                  ;              |---------------------------|
  1306                                  ;     rsp+9*8  | r8                        |
  1307                                  ;              |---------------------------|
  1308                                  ;     rsp+8*8  | r9                        |
  1309                                  ;              |---------------------------|
  1310                                  ;     rsp+7*8  | r10                       |
  1311                                  ;              |---------------------------|
  1312                                  ;     rsp+6*8  | r11                       |
  1313                                  ;              |---------------------------|
  1314                                  ;     rsp+5*8  | r12                       |
  1315                                  ;              |---------------------------|
  1316                                  ;     rsp+4*8  | r13                       |
  1317                                  ;              |---------------------------|
  1318                                  ;     rsp+3*8  | r14                       |
  1319                                  ;              |---------------------------|
  1320                                  ;     rsp+2*8  | r15                       |
  1321                                  ;              |---------------------------|
  1322                                  ;     rsp+1*8  | rflags                    |
  1323                                  ;              |---------------------------|
  1324                                  ;     rsp+0*8  | -1=true or 0=false        |
  1325                                  ;              |---------------------------|
  1326                                  
  1327                                  
  1328                                  ;===== Output the header prior to displaying the contents of memory ========================================================================================================
  1329                                  ;Assign values to be passed to printf for outputting the dump stack header
  1330 0000024F 48BF-                   mov qword rdi, showstacksubprogram.stackheadformat          ;The format of the header
  1331 00000251 [E701000000000000] 
  1332 00000259 488BB42488000000        mov qword rsi, [rsp+17*8]                                   ;Arbitrary number passed in from caller
  1333 00000261 488B9424A0000000        mov qword rdx, [rsp+20*8]                                   ;Retrieve the value of rbp
  1334 00000269 488B8C24A8000000        mov qword rcx, [rsp+21*8]                                   ;Retrieve the value of rsp
  1335 00000271 B800000000              mov qword rax, 0                                            ;Zero in rax signals to printf that no vector registers (xmm) are used.
  1336 00000276 E8(00000000)            call printf
  1337                                  
  1338                                  ;===== Set up conditions before entering a loop ============================================================================================================================
  1339                                  ;Retrieve from the stack the number of qwords within the stack to be displayed
  1340 0000027B 4C8BAC2498000000        mov qword r13, [rsp+19*8]                                   ;r13 will serve as loop counter variable
  1341                                  ;Retrieve from the stack the number of qwords outside the stack to be displayed
  1342 00000283 4C8BB42490000000        mov qword r14, [rsp+18*8]                                   ;r14 will help define the loop termination condition
  1343 0000028B 49F7DE                  neg r14                                                     ;Negate r14.  Now r14 contains a negative integer
  1344                                  
  1345                                  ;===== Setup rbx as offset number that will appear in the first column of output ===========================================================================================
  1346 0000028E 488B842498000000        mov qword rax, [rsp+19*8]                                   ;Retrieve from the stack the number of qwords within the stack to be displayed.
  1347 00000296 41BC08000000            mov qword r12, 8                                            ;Temporarily store 8 in r12
  1348 0000029C 49F7E4                  mul r12                                                     ;Multiply rax by 8 bytes per qword
  1349 0000029F 4889C3                  mov qword rbx, rax                                          ;Save the product in rbx (column 1 of output)
  1350                                  
  1351                                  ;===== Retrieve from the stack the original value of rbp; r12 will be the address that appears in the 2nd column of output =================================================
  1352 000002A2 4C8BA424A0000000        mov qword r12, [rsp+20*8]                                   ;Copy rbp to r12
  1353 000002AA 4901DC                  add r12, rbx                                                ;Give r12 the first address to be display in column 2 of the output.
  1354                                  
  1355                                  beginloop:
  1356                                  
  1357                                      ;===== Prepare to output one line of the body of the stack dump ========================================================================================================
  1358                                      ;Follow the CCC-64 protocol
  1359 000002AD 48BF-                       mov       rdi, showstacksubprogram.stacklineformat      ;Format for offset, address, and quadword value
  1360 000002AF [3602000000000000] 
  1361 000002B7 4889DE                      mov qword rsi, rbx                                      ;rbx stores the offset value
  1362 000002BA 4C89E2                      mov qword rdx, r12                                      ;r12 stores the address to be displayed
  1363 000002BD 488B0A                      mov qword rcx, [rdx]                                    ;rcx receives the contents of memory at rbp+40
  1364 000002C0 B800000000                  mov qword rax, 0                                        ;No vector registers contain data for printf
  1365 000002C5 E8(00000000)                call printf
  1366                                  
  1367                                      ;===== Advance the variables 8 bytes in the direction of small addresses ===============================================================================================
  1368 000002CA 4883EB08                    sub rbx, 8                                              ;rbx stores column 1, which is the offset value
  1369 000002CE 4983EC08                    sub r12, 8                                              ;r12 stores column 2, which is the address value
  1370 000002D2 49FFCD                      dec r13                                                 ;r13 is loop counter; it decrements from high value to low (possibly negative) value
  1371                                  
  1372                                      ;===== Check for loop termination condition ============================================================================================================================
  1373 000002D5 4D39F5                      cmp r13, r14                                            ;Compare loop variable r13 with terminating value r14
  1374 000002D8 7DD3                        jge beginloop                                           ;If r13 >= r14 then continue to iterate
  1375                                  
  1376                                  ;endloop                                                    ;Mark the lower boundary of the loop
  1377                                  
  1378                                  ;==========================================================================================================================================================================
  1379                                  ;===== The main application has completed and the system stack has returned to the state it had when the application section began. =======================================
  1380                                  ;==========================================================================================================================================================================
  1381                                  
  1382                                  
  1383                                  ;==========================================================================================================================================================================
  1384                                  ;===== Begin State Component Restore ======================================================================================================================================
  1385                                  ;==========================================================================================================================================================================
  1386                                  
  1387                                  ;===== Check the flag to determine if state components were really backed up ==============================================================================================
  1388                                  
  1389 000002DA 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
  1390 000002DB 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
  1391 000002DF 7422                    je         .restoregprs                                     ;Go to the sections that restores values to GPRs
  1392                                  
  1393                                  ;Continue with restoration of state components;
  1394                                  
  1395                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
  1396                                  
  1397                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
  1398 000002E1 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  1399 000002E6 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  1400                                  
  1401                                  ;Call the function
  1402 000002EB 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  1403                                  
  1404                                  ;Postcondition: The bitmap in now in edx:eax
  1405                                  
  1406                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
  1407 000002ED 41BF07000000            mov        r15, 7
  1408 000002F3 4C21F8                  and        rax, r15
  1409 000002F6 BA00000000              mov        rdx, 0
  1410                                  
  1411 000002FB 0FAE2C25[40030000]      xrstor     [showstacksubprogram.backuparea]
  1412                                  
  1413                                  ;===========================================================================================================================================================================
  1414                                  ;===== End State Component Restore =========================================================================================================================================
  1415                                  ;===========================================================================================================================================================================
  1416                                  
  1417                                  .restoregprs: ;=========== Restore GPR values and return to the caller =====================================================================================================
  1418                                  
  1419 00000303 9D                      popf                                                        ;Restore rflags
  1420 00000304 415F                    pop        r15                                              ;Restore r15
  1421 00000306 415E                    pop        r14                                              ;Restore r14
  1422 00000308 415D                    pop        r13                                              ;Restore r13
  1423 0000030A 415C                    pop        r12                                              ;Restore r12
  1424 0000030C 415B                    pop        r11                                              ;Restore r11
  1425 0000030E 415A                    pop        r10                                              ;Restore r10
  1426 00000310 4159                    pop        r9                                               ;Restore r9
  1427 00000312 4158                    pop        r8                                               ;Restore r8
  1428 00000314 5F                      pop        rdi                                              ;Restore rdi
  1429 00000315 5E                      pop        rsi                                              ;Restore rsi
  1430 00000316 5A                      pop        rdx                                              ;Restore rdx
  1431 00000317 59                      pop        rcx                                              ;Restore rcx
  1432 00000318 5B                      pop        rbx                                              ;Restore rbx
  1433 00000319 5D                      pop        rbp                                              ;Restore rbp
  1434                                  
  1435                                  ;Now the number of 8-byte pushes equals the number of 8-byte pops.
  1436                                  ;
  1437                                  ;========== Exit gently from this subprogram ===============================================================================================================================
  1438                                  ;
  1439 0000031A C22800                  ret 40                                                      ;Pop the address on top of the stack into rip, and then discard 40 more bytes from the top of the stack.
  1440                                  ;                                                           ;Discarding 40 bytes is necessary because there were 5 pushes of qwords in the call to "%macro dumpstack 3".
  1441                                  ;===========================================================================================================================================================================
  1442                                  ;===== End of showstacksubprogram ==========================================================================================================================================
  1443                                  ;===========================================================================================================================================================================
  1444                                  
  1445                                  
  1446                                  
  1447                                  
  1448                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  1449                                  
  1450                                  
  1451                                  
  1452                                  
  1453                                  
  1454                                  
  1455                                  ;===========================================================================================================================================================================
  1456                                  ;                             Show FPU registers subprogram
  1457                                  ;===========================================================================================================================================================================
  1458                                  ;
  1459                                  ;Program: showfpusubprogram
  1460                                  ;Purpose: Show the current state of the FPU87 stack of registers.  Each member of the stack is an individual 10-bytes register in FPU87 
  1461                                  ;extended format.
  1462                                  ;This program is called by the macro code inside the file debug.inc.
  1463                                  ;A program should bring in the debug.inc into an application program via a statement such as
  1464                                  ;%include "debug.inc"
  1465                                  ;
  1466                                  ;File name: debug.asm
  1467                                  ;Language: X86-64
  1468                                  ;Usage: CPSC240
  1469                                  ;Author: F. Holliday
  1470                                  ;Date begun: 2011-July-07
  1471                                  ;Last update: 2013-April-27
  1472                                  
  1473                                  ;Credit: The concepts for this program "showfpusubprogram" originated with a similar program written by Dr Paul Carter, and posted at the website 
  1474                                  ;www.drpaulcarter.com/pcasm .  His original program is somewhat more sophisticated than this one; for example, to allocate space on the internal stack he does not perform
  1475                                  ;14 individual pushes of one quadword per push.  He uses more advanced techniques to accomplish his goals, and thereby needs fewer instructions.  Nevertheless, this
  1476                                  ;program implements much of his original work using simpler and more tedious programming techniques.
  1477                                  
  1478                                  ;Deficiency:  This program, showfpusubprogram, does not backup SSE2 registers.  This is a known issue and will be fixed as soon as time allows.
  1479                                  
  1480                                  ;Assemble: nasm -f elf64 -l debug.lis -o debug.o debug.asm
  1481                                  
  1482                                  ;Give a name to a famous number via assembler directive
  1483                                  %define qwordsize 8                                         ;8 bytes
  1484                                  
  1485                                  ;Set masks for Control Word via assembler directives
  1486                                  %define xcontrol 0000000000001000h                          ;bit #12
  1487                                  %define rcontrol 0000000000000c00h                          ;bits #10-11
  1488                                  %define pcontrol 0000000000000300h                          ;bits #8-9
  1489                                  %define pmask    0000000000000020h                          ;bit #5
  1490                                  %define umask    0000000000000010h                          ;bit #4
  1491                                  %define omask    0000000000000008h                          ;bit #3
  1492                                  %define zmask    0000000000000004h                          ;bit #2
  1493                                  %define dmask    0000000000000002h                          ;bit #1
  1494                                  %define imask    0000000000000001h                          ;bit #0 
  1495                                  
  1496                                  ;Set masks for Status Word via assembler directives
  1497                                  %define iemask 0000000000000001h                            ;bit #0
  1498                                  %define demask 0000000000000002h                            ;bit #1
  1499                                  %define zemask 0000000000000004h                            ;bit #2
  1500                                  %define oemask 0000000000000008h                            ;bit #3
  1501                                  %define uemask 0000000000000010h                            ;bit #4
  1502                                  %define pemask 0000000000000020h                            ;bit #5
  1503                                  %define sfmask 0000000000000040h                            ;bit #6
  1504                                  %define esmask 0000000000000080h                            ;bit #7
  1505                                  %define c0mask 0000000000000100h                            ;bit #8
  1506                                  %define c1mask 0000000000000200h                            ;bit #9
  1507                                  %define c2mask 0000000000000400h                            ;bit #10
  1508                                  %define tpmask 0000000000003800h                            ;bits #11-13
  1509                                  %define c3mask 0000000000004000h                            ;bit #14
  1510                                  %define bmask  0000000000008000h                            ;bit #15
  1511                                  
  1512                                  ;Set masks for the Tag Word via assembler directives
  1513                                  %define tag7mask 000000000000c000h                          ;bits #14-15
  1514                                  %define tag6mask 0000000000003000h                          ;bits #12-13
  1515                                  %define tag5mask 0000000000000c00h                          ;bits #10-11
  1516                                  %define tag4mask 0000000000000300h                          ;bits #8-9
  1517                                  %define tag3mask 00000000000000c0h                          ;bits #6-7
  1518                                  %define tag2mask 0000000000000030h                          ;bits #4-5
  1519                                  %define tag1mask 000000000000000ch                          ;bits #2-3
  1520                                  %define tag0mask 0000000000000003h                          ;bits #0-1
  1521                                  
  1522                                  extern printf
  1523                                  
  1524                                  segment .data                                               ;This segment declares initialized data
  1525                                  
  1526 000002F5 583837204650552044-     x87headformat db "X87 FPU Display #%d", 10, "Control Word = %.4x Status Word = %.4x Tag Word = %.4x", 10, 0
  1527 000002FE 6973706C6179202325-
  1528 00000307 640A436F6E74726F6C-
  1529 00000310 20576F7264203D2025-
  1530 00000319 2E3478205374617475-
  1531 00000322 7320576F7264203D20-
  1532 0000032B 252E34782054616720-
  1533 00000334 576F7264203D20252E-
  1534 0000033D 34780A00           
  1535 00000341 257300                  stringformat db "%s", 0
  1536 00000344 526567697374657220-     columnheadings db "Register Extended hex number   Tag", 10, 0
  1537 0000034D 457874656E64656420-
  1538 00000356 686578206E756D6265-
  1539 0000035F 722020205461670A00 
  1540 00000368 202073743720202020-     st7format db "  st7    %04x%016lx  %s", 10, 0
  1541 00000371 25303478253031366C-
  1542 0000037A 78202025730A00     
  1543 00000381 202073743620202020-     st6format db "  st6    %04x%016lx  %s", 10, 0
  1544 0000038A 25303478253031366C-
  1545 00000393 78202025730A00     
  1546 0000039A 202073743520202020-     st5format db "  st5    %04x%016lx  %s", 10, 0
  1547 000003A3 25303478253031366C-
  1548 000003AC 78202025730A00     
  1549 000003B3 202073743420202020-     st4format db "  st4    %04x%016lx  %s", 10, 0
  1550 000003BC 25303478253031366C-
  1551 000003C5 78202025730A00     
  1552 000003CC 202073743320202020-     st3format db "  st3    %04x%016lx  %s", 10, 0
  1553 000003D5 25303478253031366C-
  1554 000003DE 78202025730A00     
  1555 000003E5 202073743220202020-     st2format db "  st2    %04x%016lx  %s", 10, 0
  1556 000003EE 25303478253031366C-
  1557 000003F7 78202025730A00     
  1558 000003FE 202073743120202020-     st1format db "  st1    %04x%016lx  %s", 10, 0
  1559 00000407 25303478253031366C-
  1560 00000410 78202025730A00     
  1561 00000417 202073743020202020-     st0format db "  st0    %04x%016lx  %s", 10, 0
  1562 00000420 25303478253031366C-
  1563 00000429 78202025730A00     
  1564                                  ;
  1565 00000430 456D707479206F7220-     emptyspace db "Empty or Free space", 0
  1566 00000439 467265652073706163-
  1567 00000442 6500               
  1568 00000444 56616C6964206E756D-     validnumber db "Valid number", 0
  1569 0000044D 62657200           
  1570 00000451 5A65726F206E756D62-     floatingpointzero db "Zero number", 0
  1571 0000045A 657200             
  1572 0000045D 5370656369616C3A20-     specialnumber db "Special: denormal, infinity, or nan", 0
  1573 00000466 64656E6F726D616C2C-
  1574 0000046F 20696E66696E697479-
  1575 00000478 2C206F72206E616E00 
  1576 00000481 0A00                    newline db 10, 0 ;temporary
  1577                                  ;
  1578                                  ;Information about the FPU Control Word was obtained from http://www.c-jump.com/CIS77/reference/Intel/CIS77_24319002/index.html ==> Section 7.3.4
  1579 00000483 436F6E74726F6C2077-     controlwordheading db "Control word by individual components:", 10, "Bit# Value Mnemonic Description", 10, 0
  1580 0000048C 6F726420627920696E-
  1581 00000495 646976696475616C20-
  1582 0000049E 636F6D706F6E656E74-
  1583 000004A7 733A0A426974232056-
  1584 000004B0 616C7565204D6E656D-
  1585 000004B9 6F6E69632044657363-
  1586 000004C2 72697074696F6E0A00 
  1587 000004CB 31332D313520202D20-     controlwordbit15_13 db "13-15  -     --     Unused", 10, 0
  1588 000004D4 202020202D2D202020-
  1589 000004DD 2020556E757365640A-
  1590 000004E6 00                 
  1591 000004E7 203132202020202530-     controlwordbit12 db " 12    %01x     X      Infinity control", 10, 0
  1592 000004F0 317820202020205820-
  1593 000004F9 2020202020496E6669-
  1594 00000502 6E69747920636F6E74-
  1595 0000050B 726F6C0A00         
  1596 00000510 31302D313120202530-     controlwordbit11_10 db "10-11  %01x     RC     Rounding control", 10, 0
  1597 00000519 317820202020205243-
  1598 00000522 2020202020526F756E-
  1599 0000052B 64696E6720636F6E74-
  1600 00000534 726F6C0A00         
  1601 00000539 20382D392020202530-     controlwordbit9_8 db " 8-9   %01x     PC     Precision control", 10, 0
  1602 00000542 317820202020205043-
  1603 0000054B 202020202050726563-
  1604 00000554 6973696F6E20636F6E-
  1605 0000055D 74726F6C0A00       
  1606 00000563 20362D372020202D20-     controlwordbit7_6 db " 6-7   -     --     Unused", 10, 0
  1607 0000056C 202020202D2D202020-
  1608 00000575 2020556E757365640A-
  1609 0000057E 00                 
  1610 0000057F 202035202020202530-     controlwordbit5 db "  5    %01x     PM     Precision mask", 10, 0
  1611 00000588 31782020202020504D-
  1612 00000591 202020202050726563-
  1613 0000059A 6973696F6E206D6173-
  1614 000005A3 6B0A00             
  1615 000005A6 202034202020202530-     controlwordbit4 db "  4    %01x     UM     Underflow mask", 10, 0
  1616 000005AF 31782020202020554D-
  1617 000005B8 2020202020556E6465-
  1618 000005C1 72666C6F77206D6173-
  1619 000005CA 6B0A00             
  1620 000005CD 202033202020202530-     controlwordbit3 db "  3    %01x     OM     Overflow mask", 10, 0
  1621 000005D6 317820202020204F4D-
  1622 000005DF 20202020204F766572-
  1623 000005E8 666C6F77206D61736B-
  1624 000005F1 0A00               
  1625 000005F3 202032202020202530-     controlwordbit2 db "  2    %01x     ZM     Zero divide mask", 10, 0
  1626 000005FC 317820202020205A4D-
  1627 00000605 20202020205A65726F-
  1628 0000060E 20646976696465206D-
  1629 00000617 61736B0A00         
  1630 0000061C 202031202020202530-     controlwordbit1 db "  1    %01x     DM     Denormalized operand mask", 10, 0
  1631 00000625 31782020202020444D-
  1632 0000062E 202020202044656E6F-
  1633 00000637 726D616C697A656420-
  1634 00000640 6F706572616E64206D-
  1635 00000649 61736B0A00         
  1636 0000064E 202030202020202530-     controlwordbit0 db "  0    %01x     IM     Invalid operation mask", 10, 0            
  1637 00000657 31782020202020494D-
  1638 00000660 2020202020496E7661-
  1639 00000669 6C6964206F70657261-
  1640 00000672 74696F6E206D61736B-
  1641 0000067B 0A00               
  1642                                  
  1643                                  ;Reference regarding FPU Status Word: Plantz (2012), Table 14.4, page 355.
  1644 0000067D 53746174757320776F-     statuswordheading db "Status word by individual bits (Plantz, page 355):", 10, "Bit# Value Mnemonic Description", 10, 0
  1645 00000686 726420627920696E64-
  1646 0000068F 6976696475616C2062-
  1647 00000698 6974732028506C616E-
  1648 000006A1 747A2C207061676520-
  1649 000006AA 333535293A0A426974-
  1650 000006B3 232056616C7565204D-
  1651 000006BC 6E656D6F6E69632044-
  1652 000006C5 65736372697074696F-
  1653 000006CE 6E0A00             
  1654 000006D1 202030202020202530-     statuswordbit0 db "  0    %01x     IE     Invalid operation", 10, 0
  1655 000006DA 317820202020204945-
  1656 000006E3 2020202020496E7661-
  1657 000006EC 6C6964206F70657261-
  1658 000006F5 74696F6E0A00       
  1659 000006FB 202031202020202530-     statuswordbit1 db "  1    %01x     DE     Denormalized operation", 10, 0
  1660 00000704 317820202020204445-
  1661 0000070D 202020202044656E6F-
  1662 00000716 726D616C697A656420-
  1663 0000071F 6F7065726174696F6E-
  1664 00000728 0A00               
  1665 0000072A 202032202020202530-     statuswordbit2 db "  2    %01x     ZE     Zero divide", 10, 0
  1666 00000733 317820202020205A45-
  1667 0000073C 20202020205A65726F-
  1668 00000745 206469766964650A00 
  1669 0000074E 202033202020202530-     statuswordbit3 db "  3    %01x     OE     Overflow", 10, 0
  1670 00000757 317820202020204F45-
  1671 00000760 20202020204F766572-
  1672 00000769 666C6F770A00       
  1673 0000076F 202034202020202530-     statuswordbit4 db "  4    %01x     UE     Underflow", 10, 0
  1674 00000778 317820202020205545-
  1675 00000781 2020202020556E6465-
  1676 0000078A 72666C6F770A00     
  1677 00000791 202035202020202530-     statuswordbit5 db "  5    %01x     PE     Precision", 10, 0
  1678 0000079A 317820202020205045-
  1679 000007A3 202020202050726563-
  1680 000007AC 6973696F6E0A00     
  1681 000007B3 202036202020202530-     statuswordbit6 db "  6    %01x     SF     Stack fault", 10, 0
  1682 000007BC 317820202020205346-
  1683 000007C5 202020202053746163-
  1684 000007CE 6B206661756C740A00 
  1685 000007D7 202037202020202530-     statuswordbit7 db "  7    %01x     ES     Error summary status", 10, 0
  1686 000007E0 317820202020204553-
  1687 000007E9 20202020204572726F-
  1688 000007F2 722073756D6D617279-
  1689 000007FB 207374617475730A00 
  1690 00000804 202038202020202530-     statuswordbit8 db "  8    %01x     C0     Condition code 0", 10, 0
  1691 0000080D 317820202020204330-
  1692 00000816 2020202020436F6E64-
  1693 0000081F 6974696F6E20636F64-
  1694 00000828 6520300A00         
  1695 0000082D 202039202020202530-     statuswordbit9 db "  9    %01x     C1     Condition code 1", 10, 0
  1696 00000836 317820202020204331-
  1697 0000083F 2020202020436F6E64-
  1698 00000848 6974696F6E20636F64-
  1699 00000851 6520310A00         
  1700 00000856 203130202020202530-     statuswordbit10 db " 10    %01x     C2     Condition code 2", 10, 0
  1701 0000085F 317820202020204332-
  1702 00000868 2020202020436F6E64-
  1703 00000871 6974696F6E20636F64-
  1704 0000087A 6520320A00         
  1705 0000087F 31312D313320202530-     statuswordbit11_13 db "11-13  %01x     TOP    Top of stack", 10, 0
  1706 00000888 31782020202020544F-
  1707 00000891 5020202020546F7020-
  1708 0000089A 6F6620737461636B0A-
  1709 000008A3 00                 
  1710 000008A4 203134202020202530-     statuswordbit14 db " 14    %01x     C3     Condition code 3", 10, 0
  1711 000008AD 317820202020204333-
  1712 000008B6 2020202020436F6E64-
  1713 000008BF 6974696F6E20636F64-
  1714 000008C8 6520330A00         
  1715 000008CD 203135202020202530-     statuswordbit15 db " 15    %01x     B      FPU busy", 10, 0
  1716 000008D6 317820202020204220-
  1717 000008DF 202020202046505520-
  1718 000008E8 627573790A00       
  1719                                  ;
  1720                                  ;Information about the Tag Word was obtained from http://www.c-jump.com/CIS77/reference/Intel/CIS77_24319002/index.html ==> Section 7.3.6
  1721 000008EE 54616720776F726420-     tagwordheading db "Tag word by individual components each of size 2 bits:", 10,
  1722 000008F7 627920696E64697669-
  1723 00000900 6475616C20636F6D70-
  1724 00000909 6F6E656E7473206561-
  1725 00000912 6368206F662073697A-
  1726 0000091B 65203220626974733A-
  1727 00000924 0A                 
  1728 00000925 5461672076616C7565-                    db "Tag values: 0=Valid number, 1=Floating point zero, 2=Special number (denormal, infinity, or nan), 3=Empty register (free space)", 10
  1729 0000092E 733A20303D56616C69-
  1730 00000937 64206E756D6265722C-
  1731 00000940 20313D466C6F617469-
  1732 00000949 6E6720706F696E7420-
  1733 00000952 7A65726F2C20323D53-
  1734 0000095B 70656369616C206E75-
  1735 00000964 6D626572202864656E-
  1736 0000096D 6F726D616C2C20696E-
  1737 00000976 66696E6974792C206F-
  1738 0000097F 72206E616E292C2033-
  1739 00000988 3D456D707479207265-
  1740 00000991 676973746572202866-
  1741 0000099A 726565207370616365-
  1742 000009A3 290A               
  1743 000009A5 426974232056616C75-                    db "Bit# Value   Description", 10, 0
  1744 000009AE 652020204465736372-
  1745 000009B7 697074696F6E0A00   
  1746 000009BF 31342D313520202530-     tag7bits15_14 db "14-15  %01x     Tag7", 10, 0
  1747 000009C8 317820202020205461-
  1748 000009D1 67370A00           
  1749 000009D5 31322D313320202530-     tag6bits13_12 db "12-13  %01x     Tag6", 10, 0
  1750 000009DE 317820202020205461-
  1751 000009E7 67360A00           
  1752 000009EB 31302D313120202530-     tag5bits11_10 db "10-11  %01x     Tag5", 10, 0
  1753 000009F4 317820202020205461-
  1754 000009FD 67350A00           
  1755 00000A01 20382D392020202530-     tag4bits9_8 db " 8-9   %01x     Tag4", 10, 0
  1756 00000A0A 317820202020205461-
  1757 00000A13 67340A00           
  1758 00000A17 20362D372020202530-     tag3bits7_6 db " 6-7   %01x     Tag3", 10, 0
  1759 00000A20 317820202020205461-
  1760 00000A29 67330A00           
  1761 00000A2D 20342D352020202530-     tag2bits5_4 db " 4-5   %01x     Tag2", 10, 0
  1762 00000A36 317820202020205461-
  1763 00000A3F 67320A00           
  1764 00000A43 20322D332020202530-     tag1bits3_2 db " 2-3   %01x     Tag1", 10, 0
  1765 00000A4C 317820202020205461-
  1766 00000A55 67310A00           
  1767 00000A59 20302D312020202530-     tag0bits1_0 db " 0-1   %01x     Tag0", 10, 0
  1768 00000A62 317820202020205461-
  1769 00000A6B 67300A00           
  1770                                  
  1771 00000A6F 456E64206F66204650-     farewell db "End of FPU87 stack dump", 10, 0
  1772 00000A78 55383720737461636B-
  1773 00000A81 2064756D700A00     
  1774                                  
  1775                                  segment .bss                                                ;This segment declares uninitialized data
  1776                                  ;
  1777                                  segment .text                                               ;This segment contains executable instructions
  1778                                  global showfpusubprogram                                    ;fpu refers to X87FPU also known as the st stack.
  1779                                  
  1780                                  showfpusubprogram:                                          ;A place where execution begins when this program is called.
  1781                                  
  1782                                  ;Safe programming practice: save all the data that may possibly be modified within this subprogram.  Intentionally the registers rsp and 
  1783                                  ;rax are not backed up.
  1784 0000031D 55                      push rbp                                                    ;Back up the very important base pointer register
  1785 0000031E 57                      push rdi                                                    ;Back up rdi
  1786 0000031F 56                      push rsi                                                    ;Back up rsi
  1787 00000320 52                      push rdx                                                    ;Back up rdx
  1788 00000321 51                      push rcx                                                    ;Back up rcx
  1789 00000322 4150                    push r8                                                     ;Back up r8
  1790 00000324 4151                    push r9                                                     ;Back up r9
  1791 00000326 4152                    push r10                                                    ;Back up r10
  1792 00000328 4153                    push r11                                                    ;Back up r11
  1793 0000032A 4154                    push r12                                                    ;Back up r12
  1794 0000032C 4155                    push r13                                                    ;Back up r13
  1795 0000032E 4156                    push r14                                                    ;Back up r14
  1796 00000330 4157                    push r15                                                    ;Back up r15
  1797 00000332 53                      push rbx                                                    ;Back up rbx
  1798 00000333 9C                      pushf                                                       ;Back up rflags
  1799                                  
  1800                                  ;= = = = = = Begin instructions to output X87 FPU = = = = = = = = =
  1801                                  ;
  1802                                  ;108 bytes of free storage is needed to store an image of the FPU.
  1803                                  ;Here we create 112 bytes of storage (14 qwords).
  1804 00000334 B800000000              mov qword rax, 0
  1805 00000339 50                      push rax  ;push #1
  1806 0000033A 50                      push rax  ;push #2
  1807 0000033B 50                      push rax  ;push #3
  1808 0000033C 50                      push rax  ;push #4
  1809 0000033D 50                      push rax  ;push #5
  1810 0000033E 50                      push rax  ;push #6
  1811 0000033F 50                      push rax  ;push #7
  1812 00000340 50                      push rax  ;push #8
  1813 00000341 50                      push rax  ;push #9
  1814 00000342 50                      push rax  ;push #10
  1815 00000343 50                      push rax  ;push #11
  1816 00000344 50                      push rax  ;push #12
  1817 00000345 50                      push rax  ;push #13
  1818 00000346 50                      push rax  ;push #14
  1819                                  
  1820                                  ;Place a copy of the entire FPU into the first 108 bytes of storage.
  1821 00000347 9BDD3424                fsave [rsp]                                       ;There is an alternate command 'fnsave' that is less safe.  Here fsave is used.  After execution of
  1822                                  ;                                                 ;fsave the entire fpu is reset; that is, all data are wiped clean identical to using the finit or
  1823                                  ;                                                 ;the fninit instruction.
  1824                                  
  1825                                  ;Prepare for outputting the header line
  1826 0000034B 48BF-                   mov rdi, x87headformat                            ;Copy the starting address of the format to the first standard parameter, namely: rdi
  1827 0000034D [F502000000000000] 
  1828 00000355 488BB424F0000000        mov qword rsi, [rsp+30*qwordsize]                 ;Copy the identifier number provided by the caller to the second standard parameter, namely: rsi
  1829 0000035D 668B1C24                mov word bx, [rsp]                                ;Retrieve the control word
  1830 00000361 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1831 00000368 4889DA                  mov rdx, rbx                                      ;Copy the control word to the third standard parameter, namely: rdx
  1832 0000036B 668B5C2404              mov word bx, [rsp+4]                              ;Get the status word
  1833 00000370 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1834 00000377 4889D9                  mov rcx, rbx                                      ;Copy the status word to the fourth standard parameter, namely: rcx
  1835 0000037A 668B5C2408              mov word bx, [rsp+8]                              ;Get the tag word
  1836 0000037F 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1837 00000386 4989D8                  mov r8, rbx                                       ;Copy the tag word to the fifth standard parameter, namely: r8
  1838 00000389 B800000000              mov qword rax, 0                                  ;Set rax to 0 as standard signal to printf that only integer parameters are in use.
  1839 0000038E E8(00000000)            call printf
  1840                                  ;
  1841                                  ;
  1842                                  ;===== Begin section that outputs the contents of the Control Word =========================================================================================================
  1843                                  ;
  1844 00000393 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the control word
  1845 00000395 [4103000000000000] 
  1846 0000039D 48BE-                   mov rsi, controlwordheading                       ;Provide the text for each heading over each column
  1847 0000039F [8304000000000000] 
  1848 000003A7 B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1849 000003AC E8(00000000)            call printf
  1850                                  
  1851 000003B1 41BF00000000            mov qword r15, 0
  1852 000003B7 66448B3C24              mov word r15w, [rsp]                              ;r15 is the backup copy of the control word; r15w is the lowest 16 bits of r15
  1853                                  
  1854 000003BC 48BF-                   mov rdi, stringformat                             ;Set up for string output only; no numeric outputs
  1855 000003BE [4103000000000000] 
  1856 000003C6 48BE-                   mov rsi, controlwordbit15_13                      ;Assign the start of the text to rsi
  1857 000003C8 [CB04000000000000] 
  1858 000003D0 B800000000              mov qword rax, 0
  1859 000003D5 E8(00000000)            call printf
  1860                                  
  1861 000003DA 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1862 000003DD 4881E300100000          and rbx, xcontrol                                 ;Zero out all bits of the control word except bit #12
  1863 000003E4 48C1EB0C                shr rbx, 12                                       ;Shift bit number 12 to position #0
  1864 000003E8 48BF-                   mov rdi, controlwordbit12
  1865 000003EA [E704000000000000] 
  1866 000003F2 4889DE                  mov rsi, rbx
  1867 000003F5 B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1868 000003FA E8(00000000)            call printf
  1869                                  
  1870 000003FF 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1871 00000402 4881E3000C0000          and rbx, rcontrol                                 ;Zero out all bits of the control word except bits #10 and 11
  1872 00000409 48C1EB0A                shr rbx, 10                                       ;Shift bit number 10 to position #0
  1873 0000040D 48BF-                   mov rdi, controlwordbit11_10
  1874 0000040F [1005000000000000] 
  1875 00000417 4889DE                  mov rsi, rbx
  1876 0000041A B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1877 0000041F E8(00000000)            call printf
  1878                                  ;
  1879 00000424 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1880 00000427 4881E300030000          and rbx, pcontrol
  1881 0000042E 48C1EB08                shr rbx, 8                                        ;Shift bit number 8 to position #0
  1882 00000432 48BF-                   mov rdi, controlwordbit9_8
  1883 00000434 [3905000000000000] 
  1884 0000043C 4889DE                  mov rsi, rbx
  1885 0000043F B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1886 00000444 E8(00000000)            call printf
  1887                                  ;
  1888 00000449 48BF-                   mov rdi, stringformat                             ;Output a string message only; no numeric values will be displayed
  1889 0000044B [4103000000000000] 
  1890 00000453 48BE-                   mov rsi, controlwordbit7_6                        ;Bits 7 and 6 are not used
  1891 00000455 [6305000000000000] 
  1892 0000045D B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1893 00000462 E8(00000000)            call printf
  1894                                  ;
  1895 00000467 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1896 0000046A 4883E320                and rbx, pmask
  1897 0000046E 48C1EB05                shr rbx, 5                                        ;Shift bit number 5 to position #0
  1898 00000472 48BF-                   mov rdi, controlwordbit5
  1899 00000474 [7F05000000000000] 
  1900 0000047C 4889DE                  mov rsi, rbx
  1901 0000047F B800000000              mov qword rax, 0
  1902 00000484 E8(00000000)            call printf
  1903                                  ;
  1904 00000489 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1905 0000048C 4883E310                and rbx, umask
  1906 00000490 48C1EB04                shr rbx, 4                                        ;Shift bit number 4 to position #0
  1907 00000494 48BF-                   mov rdi, controlwordbit4
  1908 00000496 [A605000000000000] 
  1909 0000049E 4889DE                  mov rsi, rbx
  1910 000004A1 B800000000              mov qword rax, 0
  1911 000004A6 E8(00000000)            call printf
  1912                                  ;
  1913 000004AB 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1914 000004AE 4883E308                and rbx, omask                                    ;Zero out all bits except bit #3
  1915 000004B2 48C1EB03                shr rbx, 3                                        ;Shift bit number 3 to position #0
  1916 000004B6 48BF-                   mov rdi, controlwordbit3
  1917 000004B8 [CD05000000000000] 
  1918 000004C0 4889DE                  mov rsi, rbx
  1919 000004C3 B800000000              mov qword rax, 0
  1920 000004C8 E8(00000000)            call printf
  1921                                  ;
  1922 000004CD 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1923 000004D0 4883E304                and rbx, zmask
  1924 000004D4 48C1EB02                shr rbx, 2
  1925 000004D8 48BF-                   mov rdi, controlwordbit2
  1926 000004DA [F305000000000000] 
  1927 000004E2 4889DE                  mov rsi, rbx
  1928 000004E5 B800000000              mov qword rax, 0
  1929 000004EA E8(00000000)            call printf
  1930                                  ;
  1931 000004EF 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1932 000004F2 4883E302                and rbx, dmask
  1933 000004F6 48D1EB                  shr rbx, 1
  1934 000004F9 48BF-                   mov rdi, controlwordbit1
  1935 000004FB [1C06000000000000] 
  1936 00000503 4889DE                  mov rsi, rbx
  1937 00000506 B800000000              mov qword rax, 0
  1938 0000050B E8(00000000)            call printf
  1939                                  ;
  1940 00000510 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1941 00000513 4883E301                and rbx, imask
  1942                                  ;No shifting of bits is necessary
  1943 00000517 48BF-                   mov rdi, controlwordbit0
  1944 00000519 [4E06000000000000] 
  1945 00000521 4889DE                  mov rsi, rbx
  1946 00000524 B800000000              mov qword rax, 0
  1947 00000529 E8(00000000)            call printf
  1948                                  ;
  1949                                  ;===== Begin section that outputs the bits of the Status Word =============================================================================
  1950                                  ;
  1951 0000052E 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the status word
  1952 00000530 [4103000000000000] 
  1953 00000538 48BE-                   mov rsi, statuswordheading                        ;Provide the text for each heading over each column
  1954 0000053A [7D06000000000000] 
  1955 00000542 B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1956 00000547 E8(00000000)            call printf
  1957                                  ;
  1958 0000054C 41BF00000000            mov qword r15, 0
  1959 00000552 66448B7C2404            mov word r15w, [rsp+4]                            ;r15 is the backup copy of the status word; r15w is the lowest 16 bits of r15
  1960 00000558 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the status word
  1961 0000055B 4881E300800000          and rbx, bmask                                    ;Zero out all bits of status word except bit #15
  1962 00000562 48C1EB0F                shr rbx, 15                                       ;Shift bit number 15 to position #0
  1963 00000566 48BF-                   mov rdi, statuswordbit15
  1964 00000568 [CD08000000000000] 
  1965 00000570 4889DE                  mov rsi, rbx
  1966 00000573 B800000000              mov qword rax, 0
  1967 00000578 E8(00000000)            call printf
  1968                                  ;
  1969 0000057D 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1970 00000580 4881E300400000          and rbx, c3mask                                   ;Zero out all bits of status word except bit #14
  1971 00000587 48C1EB0E                shr rbx, 14                                       ;Shift bit number 14 to position #0
  1972 0000058B 48BF-                   mov rdi, statuswordbit14
  1973 0000058D [A408000000000000] 
  1974 00000595 4889DE                  mov rsi, rbx
  1975 00000598 B800000000              mov qword rax, 0
  1976 0000059D E8(00000000)            call printf
  1977                                  ;
  1978 000005A2 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1979 000005A5 4881E300380000          and rbx, tpmask                                   ;Zero out all bits of status word except bits #13, 12, and 11
  1980 000005AC 48C1EB0B                shr rbx, 11                                       ;Shift bits 13, 12 and 11 to positions 2, 1, and 0
  1981 000005B0 48BF-                   mov rdi, statuswordbit11_13
  1982 000005B2 [7F08000000000000] 
  1983 000005BA 4889DE                  mov rsi, rbx
  1984 000005BD B800000000              mov qword rax, 0
  1985 000005C2 E8(00000000)            call printf
  1986                                  ;
  1987 000005C7 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1988 000005CA 4881E300040000          and rbx, c2mask                                   ;Zero out all bits of status word except bit #10
  1989 000005D1 48C1EB0A                shr rbx, 10                                       ;Shift bit number 10 to position #0
  1990 000005D5 48BF-                   mov rdi, statuswordbit10
  1991 000005D7 [5608000000000000] 
  1992 000005DF 4889DE                  mov rsi, rbx
  1993 000005E2 B800000000              mov qword rax, 0
  1994 000005E7 E8(00000000)            call printf
  1995                                  ;
  1996 000005EC 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1997 000005EF 4881E300020000          and rbx, c1mask                                   ;Zero out all bits of status word except bit #9
  1998 000005F6 48C1EB09                shr rbx, 9                                        ;Shift bit number 9 to position #0
  1999 000005FA 48BF-                   mov rdi, statuswordbit9
  2000 000005FC [2D08000000000000] 
  2001 00000604 4889DE                  mov rsi, rbx
  2002 00000607 B800000000              mov qword rax, 0
  2003 0000060C E8(00000000)            call printf
  2004                                  ;
  2005 00000611 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2006 00000614 4881E300010000          and rbx, c0mask                                   ;Zero out all bits of status word except bit #8
  2007 0000061B 48C1EB08                shr rbx, 8                                        ;Shift bit number 8 to position #0
  2008 0000061F 48BF-                   mov rdi, statuswordbit8
  2009 00000621 [0408000000000000] 
  2010 00000629 4889DE                  mov rsi, rbx
  2011 0000062C B800000000              mov qword rax, 0
  2012 00000631 E8(00000000)            call printf
  2013                                  ;
  2014 00000636 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2015 00000639 4881E380000000          and rbx, esmask                                   ;Zero out all bits of status word except bit #7
  2016 00000640 48C1EB07                shr rbx, 7                                        ;Shift bit number 7 to position #0
  2017 00000644 48BF-                   mov rdi, statuswordbit7
  2018 00000646 [D707000000000000] 
  2019 0000064E 4889DE                  mov rsi, rbx
  2020 00000651 B800000000              mov qword rax, 0
  2021 00000656 E8(00000000)            call printf
  2022                                  ;
  2023 0000065B 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2024 0000065E 4883E340                and rbx, sfmask                                   ;Zero out all bits of status word except bit #6
  2025 00000662 48C1EB06                shr rbx, 6                                        ;Shift bit number 6 to position #0
  2026 00000666 48BF-                   mov rdi, statuswordbit6
  2027 00000668 [B307000000000000] 
  2028 00000670 4889DE                  mov rsi, rbx
  2029 00000673 B800000000              mov qword rax, 0
  2030 00000678 E8(00000000)            call printf
  2031                                  ;
  2032 0000067D 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2033 00000680 4883E320                and rbx, pemask                                   ;Zero out all bits of status word except bit #5
  2034 00000684 48C1EB05                shr rbx, 5                                        ;Shift bit number 5 to position #0
  2035 00000688 48BF-                   mov rdi, statuswordbit5
  2036 0000068A [9107000000000000] 
  2037 00000692 4889DE                  mov rsi, rbx
  2038 00000695 B800000000              mov qword rax, 0
  2039 0000069A E8(00000000)            call printf
  2040                                  ;
  2041 0000069F 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2042 000006A2 4883E310                and rbx, uemask                                   ;Zero out all bits of status word except bit #4
  2043 000006A6 48C1EB04                shr rbx, 4                                        ;Shift bit number 4 to position #0
  2044 000006AA 48BF-                   mov rdi, statuswordbit4
  2045 000006AC [6F07000000000000] 
  2046 000006B4 4889DE                  mov rsi, rbx
  2047 000006B7 B800000000              mov qword rax, 0
  2048 000006BC E8(00000000)            call printf
  2049                                  ;
  2050 000006C1 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2051 000006C4 4883E308                and rbx, oemask                                   ;Zero out all bits of status word except bit #3
  2052 000006C8 48C1EB03                shr rbx, 3                                        ;Shift bit number 3 to position #0
  2053 000006CC 48BF-                   mov rdi, statuswordbit3
  2054 000006CE [4E07000000000000] 
  2055 000006D6 4889DE                  mov rsi, rbx
  2056 000006D9 B800000000              mov qword rax, 0
  2057 000006DE E8(00000000)            call printf
  2058                                  ;
  2059 000006E3 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2060 000006E6 4883E304                and rbx, zemask                                   ;Zero out all bits of the status word except bit #2
  2061 000006EA 48C1EB02                shr rbx, 2                                        ;Shift bit number 2 to position #0
  2062 000006EE 48BF-                   mov rdi, statuswordbit2
  2063 000006F0 [2A07000000000000] 
  2064 000006F8 4889DE                  mov rsi, rbx
  2065 000006FB B800000000              mov qword rax, 0
  2066 00000700 E8(00000000)            call printf
  2067                                  ;
  2068 00000705 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2069 00000708 4883E302                and rbx, demask                                   ;Zero out all bits of the status word except bit #1
  2070 0000070C 48D1EB                  shr rbx, 1                                        ;Shift bit number 1 to position #0
  2071 0000070F 48BF-                   mov rdi, statuswordbit1
  2072 00000711 [FB06000000000000] 
  2073 00000719 4889DE                  mov rsi, rbx
  2074 0000071C B800000000              mov qword rax, 0
  2075 00000721 E8(00000000)            call printf
  2076                                  ;
  2077 00000726 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  2078 00000729 4883E301                and rbx, iemask                                   ;Zero out all bits of the status word except bit #0
  2079                                  ;No shifting of bits is necessary
  2080 0000072D 48BF-                   mov rdi, statuswordbit0
  2081 0000072F [D106000000000000] 
  2082 00000737 4889DE                  mov rsi, rbx
  2083 0000073A B800000000              mov qword rax, 0
  2084 0000073F E8(00000000)            call printf
  2085                                  ;
  2086                                  ;===== Begin section that outputs the contents of the Tag Word ============================================================================
  2087                                  ;
  2088 00000744 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the status word
  2089 00000746 [4103000000000000] 
  2090 0000074E 48BE-                   mov rsi, tagwordheading                           ;Provide the text for each heading over each column
  2091 00000750 [EE08000000000000] 
  2092 00000758 B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  2093 0000075D E8(00000000)            call printf
  2094                                  ;
  2095 00000762 41BF00000000            mov qword r15, 0
  2096 00000768 66448B7C2408            mov word r15w, [rsp+8]                            ;r15 is the backup copy of the tag word; r15w is the lowest 16 bits of r15
  2097 0000076E 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the tag word
  2098 00000771 4881E300C00000          and rbx, tag7mask                                 ;Zero out all bits except bits #15 and 14
  2099 00000778 48C1EB0E                shr rbx, 14                                       ;Shift bit number 14 to position #0
  2100 0000077C 48BF-                   mov rdi, tag7bits15_14
  2101 0000077E [BF09000000000000] 
  2102 00000786 4889DE                  mov rsi, rbx
  2103 00000789 B800000000              mov qword rax, 0
  2104 0000078E E8(00000000)            call printf
  2105                                  ;
  2106 00000793 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the tag word
  2107 00000796 4881E300300000          and rbx, tag6mask                                 ;Zero out all bits except bits #13 and 12
  2108 0000079D 48C1EB0C                shr rbx, 12                                       ;Shift bit number 12 to position #0
  2109 000007A1 48BF-                   mov rdi, tag6bits13_12                            ;Place address of format into first standard parameter
  2110 000007A3 [D509000000000000] 
  2111 000007AB 4889DE                  mov rsi, rbx                                      ;Place tag6 into the second standard parameter
  2112 000007AE B800000000              mov qword rax, 0                                  ;Indicate that no fp numbers will be passed to the function printf
  2113 000007B3 E8(00000000)            call printf                                       ;Make print do the work
  2114                                  ;
  2115 000007B8 4C89FB                  mov rbx, r15
  2116 000007BB 4881E3000C0000          and rbx, tag5mask
  2117 000007C2 48C1EB0A                shr rbx, 10
  2118 000007C6 48BF-                   mov rdi, tag5bits11_10
  2119 000007C8 [EB09000000000000] 
  2120 000007D0 4889DE                  mov rsi, rbx
  2121 000007D3 B800000000              mov qword rax, 0
  2122 000007D8 E8(00000000)            call printf
  2123                                  ;
  2124 000007DD 4C89FB                  mov rbx, r15
  2125 000007E0 4881E300030000          and rbx, tag4mask
  2126 000007E7 48C1EB08                shr rbx, 8
  2127 000007EB 48BF-                   mov rdi, tag4bits9_8
  2128 000007ED [010A000000000000] 
  2129 000007F5 4889DE                  mov rsi, rbx
  2130 000007F8 B800000000              mov qword rax, 0
  2131 000007FD E8(00000000)            call printf
  2132                                  ;
  2133 00000802 4C89FB                  mov rbx, r15
  2134 00000805 4881E3C0000000          and rbx, tag3mask
  2135 0000080C 48C1EB06                shr rbx, 6
  2136 00000810 48BF-                   mov rdi, tag3bits7_6
  2137 00000812 [170A000000000000] 
  2138 0000081A 4889DE                  mov rsi, rbx
  2139 0000081D B800000000              mov qword rax, 0
  2140 00000822 E8(00000000)            call printf
  2141                                  ;
  2142 00000827 4C89FB                  mov rbx, r15
  2143 0000082A 4883E330                and rbx, tag2mask
  2144 0000082E 48C1EB04                shr rbx, 4
  2145 00000832 48BF-                   mov rdi, tag2bits5_4
  2146 00000834 [2D0A000000000000] 
  2147 0000083C 4889DE                  mov rsi, rbx
  2148 0000083F B800000000              mov qword rax, 0
  2149 00000844 E8(00000000)            call printf
  2150                                  ;
  2151 00000849 4C89FB                  mov rbx, r15
  2152 0000084C 4883E30C                and rbx, tag1mask
  2153 00000850 48C1EB02                shr rbx, 2
  2154 00000854 48BF-                   mov rdi, tag1bits3_2
  2155 00000856 [430A000000000000] 
  2156 0000085E 4889DE                  mov rsi, rbx
  2157 00000861 B800000000              mov qword rax, 0
  2158 00000866 E8(00000000)            call printf
  2159                                  ;
  2160 0000086B 4C89FB                  mov rbx, r15
  2161 0000086E 4883E303                and rbx, tag0mask
  2162                                  ;No shifting of bits is necessary
  2163 00000872 48BF-                   mov rdi, tag0bits1_0
  2164 00000874 [590A000000000000] 
  2165 0000087C 4889DE                  mov rsi, rbx
  2166 0000087F B800000000              mov qword rax, 0
  2167 00000884 E8(00000000)            call printf
  2168                                  ;
  2169                                  ;===== Begin setup of tag word for use in displaying type of contents of each fpu register ===============================================
  2170                                  ;
  2171                                  ;Initial configuration of tag word
  2172                                  ;   -----------------------------------------
  2173                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  2174                                  ;   -----------------------------------------
  2175                                  ;and each tag component is 2 bits.
  2176                                  ;The contents of TOP (within the Status word) indicates which tag associates with st0.  For instance, suppose TOP contain 5, then tag5 
  2177                                  ;identifies with register st0 as in the following diagram:
  2178                                  ;   -----------------------------------------
  2179                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  2180                                  ;   -----------------------------------------
  2181                                  ;     st2  st1  st0  st7  st6  st5  st4  st3
  2182                                  ;
  2183                                  ;The next step will be to rotate the Tag word to the right in order to align the tags with registers in the order st7 st6 st5 st4 st3 st2 
  2184                                  ;st1 st0.  Then the diagram will be as follows:
  2185                                  ;   -----------------------------------------
  2186                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  2187                                  ;   -----------------------------------------
  2188                                  ;     st7  st6  st5  st4  st3  st2  st1  st0
  2189                                  ;Then tag number k is associated with fpu register k.
  2190                                  ;
  2191                                  ;First obtain a copy of the top pointer.
  2192 00000889 41BF00000000            mov qword r15, 0                                  ;Make sure r15 contains only zeros before placing the status word in r15.
  2193 0000088F 66448B7C2404            mov word r15w, [rsp+4]                            ;Now the status word is in the lowest word of the 4-word register r15
  2194 00000895 4981E700380000          and r15, tpmask                                   ;Zero out all bits of status word except bits #13, 12, and 11
  2195 0000089C 49C1EF0B                shr r15, 11                                       ;Shift bits 13, 12 and 11 to positions 2, 1, and 0.  
  2196                                  ;                                                 ;Now r15 contains only the top pointer.
  2197                                  ;
  2198                                  ;Obtain a copy of the Tag word.
  2199 000008A0 41BE00000000            mov qword r14, 0
  2200 000008A6 66448B742408            mov word r14w, [rsp+8]                            ;The tag word is now in the lowest 2 bytes of r14.
  2201 000008AC 4981E6FFFF0000          and r14, 000000000000ffffh                        ;Make sure the upper 6 bytes are all zeros.
  2202                                  ;
  2203                                  ;Now rotate the Tag word by 2*Top many bits.  The syntax requires that we use a loop rotating by 2 bits with each iteration of the loop.
  2204                                  beginrotateloop:                                  ;Assembly version of a while loop; test stop condition before loop iterates.
  2205 000008B3 4983FF00                     cmp qword r15, 0                             ;Compare: is r15 == 0?
  2206 000008B7 740D                         je  exitrotateloop                           ;If r15 is 0 then the loop has finished.
  2207 000008B9 6641D1CE                     ror r14w, 1                                  ;Rotate right 1 bit
  2208 000008BD 6641D1CE                     ror r14w, 1                                  ;Rotate right 1 more bit.  Do it twice because tag cells hold two bits.
  2209 000008C1 49FFCF                       dec r15                                      ;r15 = r15 - 1
  2210 000008C4 EBED                    jmp beginrotateloop
  2211                                  exitrotateloop:
  2212                                  ;
  2213                                  ;
  2214                                  ;
  2215                                  ;===== Begin section that outputs the contents of each FPU register =======================================================================
  2216                                  
  2217                                  ;Display headings over each column.  Column 1 = identifier of register; Column 2 = contents of register; Column 3 = tag value
  2218 000008C6 48BF-                   mov qword rdi, stringformat                       ;First parameter receives the standard string format 
  2219 000008C8 [4103000000000000] 
  2220 000008D0 48BE-                   mov qword rsi, columnheadings                     ;Second parameter receives the string to be printed
  2221 000008D2 [4403000000000000] 
  2222 000008DA B800000000              mov qword rax, 0                                  ;No fp values will be outputted
  2223 000008DF E8(00000000)            call printf
  2224                                  
  2225                                  ;Begin section to output st7
  2226 000008E4 48BF-                   mov qword rdi, st7format                          ;Set the format for st7
  2227 000008E6 [6803000000000000] 
  2228 000008EE 488B74246A              mov qword rsi, [rsp+106]                          ;Copy the first 2 bytes of the number to the 2nd parameter
  2229 000008F3 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2230 000008FA 488B542462              mov qword rdx, [rsp+98]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2231                                  ;The tag cell for st7 is in bits 15 and 14 of the tag word r14.  We need that number to classify the data in st7.
  2232 000008FF 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2233 00000902 4881E300C00000          and rbx, tag7mask                                 ;Make sure all bits other than bits 14 and 15 are zeros
  2234 00000909 48C1EB0E                shr rbx, 14                                       ;Shift the bit in position 14 to position 0
  2235                                  ;
  2236                                  ;A case statement will be used to evaluate the contents of rbx.
  2237                                  st7_case0:
  2238 0000090D 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2239 00000911 750C                        jne st7_case1                                 ;Jump to case 1 if this is not case 0.
  2240 00000913 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2241 00000915 [4404000000000000] 
  2242 0000091D EB2E                        jmp st7_endcase                               ;Exit from the entire case statement
  2243                                  st7_case1:
  2244 0000091F 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2245 00000923 750C                        jne st7_case2                                 ;Jump to case 2 if this is not case 1.
  2246 00000925 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2247 00000927 [5104000000000000] 
  2248 0000092F EB1C                        jmp st7_endcase                               ;Exit from the entire case statement
  2249                                  st7_case2:
  2250 00000931 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2251 00000935 750C                        jne st7_case3                                 ;Jump to case 3 if this is not case 2.
  2252 00000937 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2253 00000939 [5D04000000000000] 
  2254 00000941 EB0A                        jmp st7_endcase                               ;Exit from the entire case statement
  2255                                  st7_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2256 00000943 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2257 00000945 [3004000000000000] 
  2258                                  st7_endcase:                                      ;End of the case statement
  2259                                  ;
  2260 0000094D B800000000              mov qword rax, 0                              
  2261 00000952 E8(00000000)            call printf
  2262                                  ;End of section to output st7
  2263                                  ;
  2264                                  ;
  2265                                  ;Begin section to output st6
  2266 00000957 48BF-                   mov qword rdi, st6format                          ;Set the format for st6
  2267 00000959 [8103000000000000] 
  2268 00000961 488B742460              mov qword rsi, [rsp+96]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2269 00000966 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2270 0000096D 488B542458              mov qword rdx, [rsp+88]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2271                                  ;The tag cell for st6 is in bits 13 and 12 of the tag word r14.  We need that number to classify the data in st6.
  2272 00000972 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2273 00000975 4881E300300000          and rbx, tag6mask                                 ;Make sure all bits other than bits 13 and 12 are zeros
  2274 0000097C 48C1EB0C                shr rbx, 12                                       ;Shift the bit in position 12 to position 0
  2275                                  ;
  2276                                  ;A case statement will be used to evaluate the contents of rbx.
  2277                                  st6_case0:
  2278 00000980 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2279 00000984 750C                        jne st6_case1                                 ;Jump to case 1 if this is not case 0.
  2280 00000986 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2281 00000988 [4404000000000000] 
  2282 00000990 EB2E                        jmp st6_endcase                               ;Exit from the entire case statement
  2283                                  st6_case1:
  2284 00000992 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2285 00000996 750C                        jne st6_case2                                 ;Jump to case 2 if this is not case 1.
  2286 00000998 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2287 0000099A [5104000000000000] 
  2288 000009A2 EB1C                        jmp st6_endcase                               ;Exit from the entire case statement
  2289                                  st6_case2:
  2290 000009A4 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2291 000009A8 750C                        jne st6_case3                                 ;Jump to case 3 if this is not case 2.
  2292 000009AA 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2293 000009AC [5D04000000000000] 
  2294 000009B4 EB0A                        jmp st6_endcase                               ;Exit from the entire case statement
  2295                                  st6_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2296 000009B6 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2297 000009B8 [3004000000000000] 
  2298                                  st6_endcase:                                      ;End of the case statement
  2299                                  ;
  2300 000009C0 B800000000              mov qword rax, 0                              
  2301 000009C5 E8(00000000)            call printf
  2302                                  ;End of section to output st6
  2303                                  ;
  2304                                  ;
  2305                                  ;Begin section to output st5
  2306 000009CA 48BF-                   mov qword rdi, st5format                          ;Set the format for st5
  2307 000009CC [9A03000000000000] 
  2308 000009D4 488B742456              mov qword rsi, [rsp+86]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2309 000009D9 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2310 000009E0 488B54244E              mov qword rdx, [rsp+78]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2311                                  ;The tag cell for st5 is in bits 11 and 10 of the tag word r14.  We need that number to classify the data in st5.
  2312 000009E5 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2313 000009E8 4881E3000C0000          and rbx, tag5mask                                 ;Make sure all bits other than bits 11 and 10 are zeros
  2314 000009EF 48C1EB0A                shr rbx, 10                                       ;Shift the bit in position 10 to position 0
  2315                                  ;
  2316                                  ;A case statement will be used to evaluate the contents of rbx.
  2317                                  st5_case0:
  2318 000009F3 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2319 000009F7 750C                        jne st5_case1                                 ;Jump to case 1 if this is not case 0.
  2320 000009F9 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2321 000009FB [4404000000000000] 
  2322 00000A03 EB2E                        jmp st5_endcase                               ;Exit from the entire case statement
  2323                                  st5_case1:
  2324 00000A05 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2325 00000A09 750C                        jne st5_case2                                 ;Jump to case 2 if this is not case 1.
  2326 00000A0B 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2327 00000A0D [5104000000000000] 
  2328 00000A15 EB1C                        jmp st5_endcase                               ;Exit from the entire case statement
  2329                                  st5_case2:
  2330 00000A17 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2331 00000A1B 750C                        jne st5_case3                                 ;Jump to case 3 if this is not case 2.
  2332 00000A1D 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2333 00000A1F [5D04000000000000] 
  2334 00000A27 EB0A                        jmp st5_endcase                               ;Exit from the entire case statement
  2335                                  st5_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2336 00000A29 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2337 00000A2B [3004000000000000] 
  2338                                  st5_endcase:                                      ;End of the case statement
  2339                                  ;
  2340 00000A33 B800000000              mov qword rax, 0                              
  2341 00000A38 E8(00000000)            call printf
  2342                                  ;End of section to output st5
  2343                                  ;
  2344                                  ;
  2345                                  ;Begin section to output st4
  2346 00000A3D 48BF-                   mov qword rdi, st4format                          ;Set the format for st4
  2347 00000A3F [B303000000000000] 
  2348 00000A47 488B74244C              mov qword rsi, [rsp+76]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2349 00000A4C 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2350 00000A53 488B542444              mov qword rdx, [rsp+68]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2351                                  ;The tag cell for st4 is in bits 9 and 8 of the tag word r14.  We need that number to classify the data in st4.
  2352 00000A58 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2353 00000A5B 4881E300030000          and rbx, tag4mask                                 ;Make sure all bits other than bits 9 and 8 are zeros
  2354 00000A62 48C1EB08                shr rbx, 8                                       ;Shift the bit in position 8 to position 0
  2355                                  ;
  2356                                  ;A case statement will be used to evaluate the contents of rbx.
  2357                                  st4_case0:
  2358 00000A66 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2359 00000A6A 750C                        jne st4_case1                                 ;Jump to case 1 if this is not case 0.
  2360 00000A6C 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2361 00000A6E [4404000000000000] 
  2362 00000A76 EB2E                        jmp st4_endcase                               ;Exit from the entire case statement
  2363                                  st4_case1:
  2364 00000A78 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2365 00000A7C 750C                        jne st4_case2                                 ;Jump to case 2 if this is not case 1.
  2366 00000A7E 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2367 00000A80 [5104000000000000] 
  2368 00000A88 EB1C                        jmp st4_endcase                               ;Exit from the entire case statement
  2369                                  st4_case2:
  2370 00000A8A 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2371 00000A8E 750C                        jne st4_case3                                 ;Jump to case 3 if this is not case 2.
  2372 00000A90 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2373 00000A92 [5D04000000000000] 
  2374 00000A9A EB0A                        jmp st4_endcase                               ;Exit from the entire case statement
  2375                                  st4_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2376 00000A9C 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2377 00000A9E [3004000000000000] 
  2378                                  st4_endcase:                                      ;End of the case statement
  2379                                  ;
  2380 00000AA6 B800000000              mov qword rax, 0                              
  2381 00000AAB E8(00000000)            call printf
  2382                                  ;End of section to output st4
  2383                                  ;
  2384                                  ;
  2385                                  ;Begin section to output st3
  2386 00000AB0 48BF-                   mov qword rdi, st3format                          ;Set the format for st3
  2387 00000AB2 [CC03000000000000] 
  2388 00000ABA 488B742442              mov qword rsi, [rsp+66]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2389 00000ABF 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2390 00000AC6 488B54243A              mov qword rdx, [rsp+58]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2391                                  ;The tag cell for st3 is in bits 7 and 6 of the tag word r14.  We need that number to classify the data in st3.
  2392 00000ACB 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2393 00000ACE 4881E3C0000000          and rbx, tag3mask                                 ;Make sure all bits other than bits 9 and 8 are zeros
  2394 00000AD5 48C1EB06                shr rbx, 6                                       ;Shift the bit in position 6 to position 0
  2395                                  ;
  2396                                  ;A case statement will be used to evaluate the contents of rbx.
  2397                                  st3_case0:
  2398 00000AD9 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2399 00000ADD 750C                        jne st3_case1                                 ;Jump to case 1 if this is not case 0.
  2400 00000ADF 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2401 00000AE1 [4404000000000000] 
  2402 00000AE9 EB2E                        jmp st3_endcase                               ;Exit from the entire case statement
  2403                                  st3_case1:
  2404 00000AEB 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2405 00000AEF 750C                        jne st3_case2                                 ;Jump to case 2 if this is not case 1.
  2406 00000AF1 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2407 00000AF3 [5104000000000000] 
  2408 00000AFB EB1C                        jmp st3_endcase                               ;Exit from the entire case statement
  2409                                  st3_case2:
  2410 00000AFD 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2411 00000B01 750C                        jne st3_case3                                 ;Jump to case 3 if this is not case 2.
  2412 00000B03 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2413 00000B05 [5D04000000000000] 
  2414 00000B0D EB0A                        jmp st3_endcase                               ;Exit from the entire case statement
  2415                                  st3_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2416 00000B0F 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2417 00000B11 [3004000000000000] 
  2418                                  st3_endcase:                                      ;End of the case statement
  2419                                  ;
  2420 00000B19 B800000000              mov qword rax, 0                              
  2421 00000B1E E8(00000000)            call printf
  2422                                  ;End of section to output st3
  2423                                  ;
  2424                                  ;
  2425                                  ;Begin section to output st2
  2426 00000B23 48BF-                   mov qword rdi, st2format                          ;Set the format for st2
  2427 00000B25 [E503000000000000] 
  2428 00000B2D 488B742438              mov qword rsi, [rsp+56]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2429 00000B32 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2430 00000B39 488B542430              mov qword rdx, [rsp+48]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2431                                  ;The tag cell for st2 is in bits 5 and 4 of the tag word r14.  We need that number to classify the data in st2.
  2432 00000B3E 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2433 00000B41 4883E330                and rbx, tag2mask                                 ;Make sure all bits other than bits 5 and 4 are zeros
  2434 00000B45 48C1EB04                shr rbx, 4                                        ;Shift the bit in position 4 to position 0
  2435                                  ;
  2436                                  ;A case statement will be used to evaluate the contents of rbx.
  2437                                  st2_case0:
  2438 00000B49 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2439 00000B4D 750C                        jne st2_case1                                 ;Jump to case 1 if this is not case 0.
  2440 00000B4F 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2441 00000B51 [4404000000000000] 
  2442 00000B59 EB2E                        jmp st2_endcase                               ;Exit from the entire case statement
  2443                                  st2_case1:
  2444 00000B5B 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2445 00000B5F 750C                        jne st2_case2                                 ;Jump to case 2 if this is not case 1.
  2446 00000B61 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2447 00000B63 [5104000000000000] 
  2448 00000B6B EB1C                        jmp st2_endcase                               ;Exit from the entire case statement
  2449                                  st2_case2:
  2450 00000B6D 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2451 00000B71 750C                        jne st2_case3                                 ;Jump to case 3 if this is not case 2.
  2452 00000B73 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2453 00000B75 [5D04000000000000] 
  2454 00000B7D EB0A                        jmp st2_endcase                               ;Exit from the entire case statement
  2455                                  st2_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2456 00000B7F 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2457 00000B81 [3004000000000000] 
  2458                                  st2_endcase:                                      ;End of the case statement
  2459                                  ;
  2460 00000B89 B800000000              mov qword rax, 0                              
  2461 00000B8E E8(00000000)            call printf
  2462                                  ;End of section to output st2
  2463                                  ;
  2464                                  ;
  2465                                  ;Begin section to output st1
  2466 00000B93 48BF-                   mov qword rdi, st1format                          ;Set the format for st1
  2467 00000B95 [FE03000000000000] 
  2468 00000B9D 488B74242E              mov qword rsi, [rsp+46]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2469 00000BA2 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2470 00000BA9 488B542426              mov qword rdx, [rsp+38]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2471                                  ;The tag cell for st1 is in bits 3 and 2 of the tag word r14.  We need that number to classify the data in st1.
  2472 00000BAE 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2473 00000BB1 4883E30C                and rbx, tag1mask                                 ;Make sure all bits other than bits 3 and 2 are zeros
  2474 00000BB5 48C1EB02                shr rbx, 2                                        ;Shift the bit in position 2 to position 0
  2475                                  ;
  2476                                  ;A case statement will be used to evaluate the contents of rbx.
  2477                                  st1_case0:
  2478 00000BB9 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2479 00000BBD 750C                        jne st1_case1                                 ;Jump to case 1 if this is not case 0.
  2480 00000BBF 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2481 00000BC1 [4404000000000000] 
  2482 00000BC9 EB2E                        jmp st1_endcase                               ;Exit from the entire case statement
  2483                                  st1_case1:
  2484 00000BCB 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2485 00000BCF 750C                        jne st1_case2                                 ;Jump to case 2 if this is not case 1.
  2486 00000BD1 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2487 00000BD3 [5104000000000000] 
  2488 00000BDB EB1C                        jmp st1_endcase                               ;Exit from the entire case statement
  2489                                  st1_case2:
  2490 00000BDD 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2491 00000BE1 750C                        jne st1_case3                                 ;Jump to case 3 if this is not case 2.
  2492 00000BE3 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2493 00000BE5 [5D04000000000000] 
  2494 00000BED EB0A                        jmp st1_endcase                               ;Exit from the entire case statement
  2495                                  st1_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2496 00000BEF 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2497 00000BF1 [3004000000000000] 
  2498                                  st1_endcase:                                      ;End of the case statement
  2499                                  ;
  2500 00000BF9 B800000000              mov qword rax, 0                                  ;No fp values will be passed to parameters
  2501 00000BFE E8(00000000)            call printf
  2502                                  ;End of section to output st1
  2503                                  ;
  2504                                  ;
  2505                                  ;Begin section to output st0
  2506 00000C03 48BF-                   mov qword rdi, st0format                          ;Set the format for st0
  2507 00000C05 [1704000000000000] 
  2508 00000C0D 488B742424              mov qword rsi, [rsp+36]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2509 00000C12 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2510 00000C19 488B54241C              mov qword rdx, [rsp+28]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2511                                  
  2512                                  ;The tag cell for st0 is in bits 1 and 0 of the tag word r14.  We need that number to classify the data in st7.
  2513 00000C1E 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2514 00000C21 4883E303                and rbx, tag0mask                                 ;Make sure all bits other than bits 1 and 0 are zeros
  2515                                  ;
  2516                                  ;A case statement will be used to evaluate the contents of rbx.
  2517                                  st0_case0:
  2518 00000C25 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2519 00000C29 750C                        jne st0_case1                                 ;Jump to case 1 if this is not case 0.
  2520 00000C2B 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2521 00000C2D [4404000000000000] 
  2522 00000C35 EB2E                        jmp st0_endcase                               ;Exit from the entire case statement
  2523                                  st0_case1:
  2524 00000C37 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2525 00000C3B 750C                        jne st0_case2                                 ;Jump to case 2 if this is not case 1.
  2526 00000C3D 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2527 00000C3F [5104000000000000] 
  2528 00000C47 EB1C                        jmp st0_endcase                               ;Exit from the entire case statement
  2529                                  st0_case2:
  2530 00000C49 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2531 00000C4D 750C                        jne st0_case3                                 ;Jump to case 2 if this is not case 1.
  2532 00000C4F 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2533 00000C51 [5D04000000000000] 
  2534 00000C59 EB0A                        jmp st0_endcase                               ;Exit from the entire case statement
  2535                                  st0_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2536 00000C5B 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2537 00000C5D [3004000000000000] 
  2538                                  st0_endcase:                                      ;End of the case statement
  2539                                  ;
  2540 00000C65 B800000000              mov qword rax, 0                                  ;No fp values will be passed to parameters.
  2541 00000C6A E8(00000000)            call printf
  2542                                  ;End of section to output st0
  2543                                  
  2544                                  ;===============================
  2545                                  ;End of showing FPU registers  |
  2546                                  ;===============================
  2547                                  ;
  2548                                  ;===== Final message ====================================================================================================================== 
  2549                                  ;
  2550 00000C6F 48BF-                   mov qword rdi, stringformat                                 ;"%s"
  2551 00000C71 [4103000000000000] 
  2552 00000C79 48BE-                   mov qword rsi, farewell                                     ;"End of FPU87 stack dump"
  2553 00000C7B [6F0A000000000000] 
  2554 00000C83 B800000000              mov qword rax, 0                                            ;Do not use any data from SSE
  2555 00000C88 E8(00000000)            call printf                                                 ;Standard library function handles the output
  2556                                  ;
  2557                                  ;Dr Carter's program restores all the data in the FPU from memory.  Therefore, we do it here also. 
  2558                                  ;Think of the frstor instruction as the reverse of the fsave instruction; it restores all the fpu registers from the system stack.  
  2559                                  ;Scan the source code above belonging to the function showfpusubprogram and notice that between the fsave instruction and the frstor 
  2560                                  ;instruction below the system stack is never modified.  Therefore, it should be safe to apply the frstor instruction.
  2561                                  ;
  2562 00000C8D DD2424                  frstor [rsp]   ;Hopefully rsp has not changed since the fsave instruction was executed earlier.
  2563                                  ;
  2564                                  ;===== Time to clean up and return to the caller ==========================================================================================
  2565                                  ;This program is preparing to terminate.  It is time to reverse those earlier pushes.
  2566                                  
  2567                                  ;First do 14 pops and discard any data.  Undoubtedly Dr Carter has a more sophisticated way to accomplish the same result.
  2568 00000C90 58                      pop rax  ;pop #1
  2569 00000C91 58                      pop rax  ;pop #2
  2570 00000C92 58                      pop rax  ;pop #3
  2571 00000C93 58                      pop rax  ;pop #4
  2572 00000C94 58                      pop rax  ;pop #5
  2573 00000C95 58                      pop rax  ;pop #6
  2574 00000C96 58                      pop rax  ;pop #7
  2575 00000C97 58                      pop rax  ;pop #8
  2576 00000C98 58                      pop rax  ;pop #9
  2577 00000C99 58                      pop rax  ;pop #10
  2578 00000C9A 58                      pop rax  ;pop #11
  2579 00000C9B 58                      pop rax  ;pop #12
  2580 00000C9C 58                      pop rax  ;pop #13
  2581 00000C9D 58                      pop rax  ;pop #14
  2582                                  ;
  2583                                  ;Restore orginal values to the general purpose registers
  2584 00000C9E 9D                      popf                                                        ;Restore rflags
  2585 00000C9F 5B                      pop rbx                                                     ;Restore rbx
  2586 00000CA0 415F                    pop r15                                                     ;Restore r15
  2587 00000CA2 415E                    pop r14                                                     ;Restore r14
  2588 00000CA4 415D                    pop r13                                                     ;Restore r13
  2589 00000CA6 415C                    pop r12                                                     ;Restore r12
  2590 00000CA8 415B                    pop r11                                                     ;Restore r11
  2591 00000CAA 415A                    pop r10                                                     ;Restore r10
  2592 00000CAC 4159                    pop r9                                                      ;Restore r9
  2593 00000CAE 4158                    pop r8                                                      ;Restore r8
  2594 00000CB0 59                      pop rcx                                                     ;Restore rcx
  2595 00000CB1 5A                      pop rdx                                                     ;Restore rdx
  2596 00000CB2 5E                      pop rsi                                                     ;Restore rsi
  2597 00000CB3 5F                      pop rdi                                                     ;Restore rdi
  2598 00000CB4 5D                      pop rbp                                                     ;Restore rbp
  2599                                  ;
  2600                                  ;
  2601                                  ;===== Return an integer value 0 to the caller =============================================================================================================================
  2602                                  ;
  2603 00000CB5 C20800                  ret 8                                                       ;Pop the address on top of the stack into rip, and then discard 8 more bytes from the top of the stack.
  2604                                  ;
  2605                                  ;========== End of showfpusubprogram =======================================================================================================================================
  2606                                  ;
  2607                                  ;
  2608                                  
  2609                                  
  2610                                  
  2611                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  2612                                  
  2613                                  
  2614                                  
  2615                                  
  2616                                  ;===========================================================================================================================================================================
  2617                                  ;===========================================================================================================================================================================
  2618                                  ;                             Show XMM Registers Subprogram
  2619                                  ;===========================================================================================================================================================================
  2620                                  ;===========================================================================================================================================================================
  2621                                  
  2622                                  global showxmmsubprogram
  2623                                  
  2624                                  segment .data
  2625                                  
  2626 00000A88 257300                  formatstring db "%s", 0
  2627 00000A8B 535345322044756D70-     formatdumpnumber db "SSE2 Dump # %ld", 10, 0
  2628 00000A94 202320256C640A00   
  2629 00000A9C 786D6D232320202020-     formatsseheader db "xmm##        high64              low64", 10, 0
  2630 00000AA5 202020206869676836-
  2631 00000AAE 342020202020202020-
  2632 00000AB7 2020202020206C6F77-
  2633 00000AC0 36340A00           
  2634 00000AC4 786D6D31353A202025-     formatxmm15 db     "xmm15:  %016lx    %016lx", 10, 0
  2635 00000ACD 3031366C7820202020-
  2636 00000AD6 253031366C780A00   
  2637 00000ADE 786D6D31343A202025-     formatxmm14 db     "xmm14:  %016lx    %016lx", 10, 0
  2638 00000AE7 3031366C7820202020-
  2639 00000AF0 253031366C780A00   
  2640 00000AF8 786D6D31333A202025-     formatxmm13 db     "xmm13:  %016lx    %016lx", 10, 0
  2641 00000B01 3031366C7820202020-
  2642 00000B0A 253031366C780A00   
  2643 00000B12 786D6D31323A202025-     formatxmm12 db     "xmm12:  %016lx    %016lx", 10, 0
  2644 00000B1B 3031366C7820202020-
  2645 00000B24 253031366C780A00   
  2646 00000B2C 786D6D31313A202025-     formatxmm11 db     "xmm11:  %016lx    %016lx", 10, 0
  2647 00000B35 3031366C7820202020-
  2648 00000B3E 253031366C780A00   
  2649 00000B46 786D6D31303A202025-     formatxmm10 db     "xmm10:  %016lx    %016lx", 10, 0
  2650 00000B4F 3031366C7820202020-
  2651 00000B58 253031366C780A00   
  2652 00000B60 786D6D393A20202025-     formatxmm9  db     "xmm9:   %016lx    %016lx", 10, 0
  2653 00000B69 3031366C7820202020-
  2654 00000B72 253031366C780A00   
  2655 00000B7A 786D6D383A20202025-     formatxmm8  db     "xmm8:   %016lx    %016lx", 10, 0
  2656 00000B83 3031366C7820202020-
  2657 00000B8C 253031366C780A00   
  2658 00000B94 786D6D373A20202025-     formatxmm7  db     "xmm7:   %016lx    %016lx", 10, 0
  2659 00000B9D 3031366C7820202020-
  2660 00000BA6 253031366C780A00   
  2661 00000BAE 786D6D363A20202025-     formatxmm6  db     "xmm6:   %016lx    %016lx", 10, 0
  2662 00000BB7 3031366C7820202020-
  2663 00000BC0 253031366C780A00   
  2664 00000BC8 786D6D353A20202025-     formatxmm5  db     "xmm5:   %016lx    %016lx", 10, 0
  2665 00000BD1 3031366C7820202020-
  2666 00000BDA 253031366C780A00   
  2667 00000BE2 786D6D343A20202025-     formatxmm4  db     "xmm4:   %016lx    %016lx", 10, 0
  2668 00000BEB 3031366C7820202020-
  2669 00000BF4 253031366C780A00   
  2670 00000BFC 786D6D333A20202025-     formatxmm3  db     "xmm3:   %016lx    %016lx", 10, 0
  2671 00000C05 3031366C7820202020-
  2672 00000C0E 253031366C780A00   
  2673 00000C16 786D6D323A20202025-     formatxmm2  db     "xmm2:   %016lx    %016lx", 10, 0
  2674 00000C1F 3031366C7820202020-
  2675 00000C28 253031366C780A00   
  2676 00000C30 786D6D313A20202025-     formatxmm1  db     "xmm1:   %016lx    %016lx", 10, 0
  2677 00000C39 3031366C7820202020-
  2678 00000C42 253031366C780A00   
  2679 00000C4A 786D6D303A20202025-     formatxmm0  db     "xmm0:   %016lx    %016lx", 10, 0
  2680 00000C53 3031366C7820202020-
  2681 00000C5C 253031366C780A00   
  2682                                  
  2683                                  segment .text
  2684                                  showxmmsubprogram:
  2685                                  
  2686                                  ;========== Create backups for general purpose registers ==================================================================================================================
  2687                                  ;Safe programming practice: save all the data that may possibly be modified within this subprogram.  Intentionally the registers rsp
  2688                                  ;and rax are not backed up.
  2689 00000CB8 55                      push rbp                                                    ;Back up the very important base pointer register
  2690 00000CB9 57                      push rdi                                                    ;Back up rdi
  2691 00000CBA 56                      push rsi                                                    ;Back up rsi
  2692 00000CBB 52                      push rdx                                                    ;Back up rdx
  2693 00000CBC 51                      push rcx                                                    ;Back up rcx
  2694 00000CBD 4150                    push r8                                                     ;Back up r8
  2695 00000CBF 4151                    push r9                                                     ;Back up r9
  2696 00000CC1 4152                    push r10                                                    ;Back up r10
  2697 00000CC3 4153                    push r11                                                    ;Back up r11
  2698 00000CC5 4154                    push r12                                                    ;Back up r12
  2699 00000CC7 4155                    push r13                                                    ;Back up r13
  2700 00000CC9 4156                    push r14                                                    ;Back up r14
  2701 00000CCB 4157                    push r15                                                    ;Back up r15
  2702 00000CCD 53                      push rbx                                                    ;Back up rbx
  2703 00000CCE 9C                      pushf                                                       ;Back up rflags
  2704                                  
  2705                                  ;========== Copy all xmm values to the internal stack =====================================================================================================================
  2706 00000CCF 90                      align 16
  2707 00000CD0 6A00                    push qword 0
  2708 00000CD2 6A00                    push qword 0
  2709 00000CD4 66440F113C24            movupd     [rsp], xmm15
  2710 00000CDA 6A00                    push qword 0
  2711 00000CDC 6A00                    push qword 0
  2712 00000CDE 66440F113424            movupd     [rsp], xmm14
  2713 00000CE4 6A00                    push qword 0
  2714 00000CE6 6A00                    push qword 0
  2715 00000CE8 66440F112C24            movupd     [rsp], xmm13
  2716 00000CEE 6A00                    push qword 0
  2717 00000CF0 6A00                    push qword 0
  2718 00000CF2 66440F112424            movupd     [rsp], xmm12
  2719 00000CF8 6A00                    push qword 0
  2720 00000CFA 6A00                    push qword 0
  2721 00000CFC 66440F111C24            movupd     [rsp], xmm11
  2722 00000D02 6A00                    push qword 0
  2723 00000D04 6A00                    push qword 0
  2724 00000D06 66440F111424            movupd     [rsp], xmm10
  2725 00000D0C 6A00                    push qword 0
  2726 00000D0E 6A00                    push qword 0
  2727 00000D10 66440F110C24            movupd     [rsp], xmm9
  2728 00000D16 6A00                    push qword 0
  2729 00000D18 6A00                    push qword 0
  2730 00000D1A 66440F110424            movupd     [rsp], xmm8
  2731 00000D20 6A00                    push qword 0
  2732 00000D22 6A00                    push qword 0
  2733 00000D24 660F113C24              movupd     [rsp], xmm7
  2734 00000D29 6A00                    push qword 0
  2735 00000D2B 6A00                    push qword 0
  2736 00000D2D 660F113424              movupd     [rsp], xmm6
  2737 00000D32 6A00                    push qword 0
  2738 00000D34 6A00                    push qword 0
  2739 00000D36 660F112C24              movupd     [rsp], xmm5
  2740 00000D3B 6A00                    push qword 0
  2741 00000D3D 6A00                    push qword 0
  2742 00000D3F 660F112424              movupd     [rsp], xmm4
  2743 00000D44 6A00                    push qword 0
  2744 00000D46 6A00                    push qword 0
  2745 00000D48 660F111C24              movupd     [rsp], xmm3
  2746 00000D4D 6A00                    push qword 0
  2747 00000D4F 6A00                    push qword 0
  2748 00000D51 660F111424              movupd     [rsp], xmm2
  2749 00000D56 6A00                    push qword 0
  2750 00000D58 6A00                    push qword 0
  2751 00000D5A 660F110C24              movupd     [rsp], xmm1
  2752 00000D5F 6A00                    push qword 0
  2753 00000D61 6A00                    push qword 0
  2754 00000D63 660F110424              movupd     [rsp], xmm0
  2755                                  ;========= End of copying xmm values to the internal stack ================================================================================================================
  2756                                  
  2757                                  ;========= Begin section that will display all the xmm values =============================================================================================================
  2758 00000D68 90<rept>                align 16
  2759 00000D70 B800000000              mov qword  rax, 0
  2760 00000D75 48BF-                   mov        rdi, formatdumpnumber
  2761 00000D77 [8B0A000000000000] 
  2762 00000D7F 488BB42480010000        mov        rsi, [rsp+48*8]
  2763 00000D87 E8(00000000)            call       printf
  2764 00000D8C B800000000              mov qword  rax, 0
  2765 00000D91 48BF-                   mov        rdi, formatstring                                ;"%s", 0
  2766 00000D93 [880A000000000000] 
  2767 00000D9B 48BE-                   mov        rsi, formatsseheader                             ;"xmm**    high64    low64"
  2768 00000D9D [9C0A000000000000] 
  2769 00000DA5 E8(00000000)            call       printf
  2770 00000DAA B800000000              mov qword  rax, 0
  2771 00000DAF 48BF-                   mov        rdi, formatxmm15
  2772 00000DB1 [C40A000000000000] 
  2773 00000DB9 488BB424F8000000        mov        rsi, [rsp+31*8]
  2774 00000DC1 488B9424F0000000        mov        rdx, [rsp+30*8]
  2775 00000DC9 E8(00000000)            call       printf
  2776 00000DCE B800000000              mov qword  rax, 0
  2777 00000DD3 48BF-                   mov        rdi, formatxmm14
  2778 00000DD5 [DE0A000000000000] 
  2779 00000DDD 488BB424E8000000        mov        rsi, [rsp+29*8]
  2780 00000DE5 488B9424E0000000        mov        rdx, [rsp+28*8]
  2781 00000DED E8(00000000)            call       printf
  2782 00000DF2 B800000000              mov qword  rax, 0
  2783 00000DF7 48BF-                   mov        rdi, formatxmm13
  2784 00000DF9 [F80A000000000000] 
  2785 00000E01 488BB424D8000000        mov        rsi, [rsp+27*8]
  2786 00000E09 488B9424D0000000        mov        rdx, [rsp+26*8]
  2787 00000E11 E8(00000000)            call       printf
  2788 00000E16 B800000000              mov qword  rax, 0
  2789 00000E1B 48BF-                   mov        rdi, formatxmm12
  2790 00000E1D [120B000000000000] 
  2791 00000E25 488BB424C8000000        mov        rsi, [rsp+25*8]
  2792 00000E2D 488B9424C0000000        mov        rdx, [rsp+24*8]
  2793 00000E35 E8(00000000)            call       printf
  2794 00000E3A B800000000              mov qword  rax, 0
  2795 00000E3F 48BF-                   mov        rdi, formatxmm11
  2796 00000E41 [2C0B000000000000] 
  2797 00000E49 488BB424B8000000        mov        rsi, [rsp+23*8]
  2798 00000E51 488B9424B0000000        mov        rdx, [rsp+22*8]
  2799 00000E59 E8(00000000)            call       printf
  2800 00000E5E B800000000              mov qword  rax, 0
  2801 00000E63 48BF-                   mov        rdi, formatxmm10
  2802 00000E65 [460B000000000000] 
  2803 00000E6D 488BB424A8000000        mov        rsi, [rsp+21*8]
  2804 00000E75 488B9424A0000000        mov        rdx, [rsp+20*8]
  2805 00000E7D E8(00000000)            call       printf
  2806 00000E82 B800000000              mov qword  rax, 0
  2807 00000E87 48BF-                   mov        rdi, formatxmm9
  2808 00000E89 [600B000000000000] 
  2809 00000E91 488BB42498000000        mov        rsi, [rsp+19*8]
  2810 00000E99 488B942490000000        mov        rdx, [rsp+18*8]
  2811 00000EA1 E8(00000000)            call       printf
  2812 00000EA6 B800000000              mov qword  rax, 0
  2813 00000EAB 48BF-                   mov        rdi, formatxmm8
  2814 00000EAD [7A0B000000000000] 
  2815 00000EB5 488BB42488000000        mov        rsi, [rsp+17*8]
  2816 00000EBD 488B942480000000        mov        rdx, [rsp+16*8]
  2817 00000EC5 E8(00000000)            call       printf
  2818 00000ECA B800000000              mov qword  rax, 0
  2819 00000ECF 48BF-                   mov        rdi, formatxmm7
  2820 00000ED1 [940B000000000000] 
  2821 00000ED9 488B742478              mov        rsi, [rsp+15*8]
  2822 00000EDE 488B542470              mov        rdx, [rsp+14*8]
  2823 00000EE3 E8(00000000)            call       printf
  2824 00000EE8 B800000000              mov qword  rax, 0
  2825 00000EED 48BF-                   mov        rdi, formatxmm6
  2826 00000EEF [AE0B000000000000] 
  2827 00000EF7 488B742468              mov        rsi, [rsp+13*8]
  2828 00000EFC 488B542460              mov        rdx, [rsp+12*8]
  2829 00000F01 E8(00000000)            call       printf
  2830 00000F06 B800000000              mov qword  rax, 0
  2831 00000F0B 48BF-                   mov        rdi, formatxmm5
  2832 00000F0D [C80B000000000000] 
  2833 00000F15 488B742458              mov        rsi, [rsp+11*8]
  2834 00000F1A 488B542450              mov        rdx, [rsp+10*8]
  2835 00000F1F E8(00000000)            call       printf
  2836 00000F24 B800000000              mov qword  rax, 0
  2837 00000F29 48BF-                   mov        rdi, formatxmm4
  2838 00000F2B [E20B000000000000] 
  2839 00000F33 488B742448              mov        rsi, [rsp+9*8]
  2840 00000F38 488B542440              mov        rdx, [rsp+8*8]
  2841 00000F3D E8(00000000)            call       printf
  2842 00000F42 B800000000              mov qword  rax, 0
  2843 00000F47 48BF-                   mov        rdi, formatxmm3
  2844 00000F49 [FC0B000000000000] 
  2845 00000F51 488B742438              mov        rsi, [rsp+7*8]
  2846 00000F56 488B542430              mov        rdx, [rsp+6*8]
  2847 00000F5B E8(00000000)            call       printf
  2848 00000F60 B800000000              mov qword  rax, 0
  2849 00000F65 48BF-                   mov        rdi, formatxmm2
  2850 00000F67 [160C000000000000] 
  2851 00000F6F 488B742428              mov        rsi, [rsp+5*8]
  2852 00000F74 488B542420              mov        rdx, [rsp+4*8]
  2853 00000F79 E8(00000000)            call       printf
  2854 00000F7E B800000000              mov qword  rax, 0
  2855 00000F83 48BF-                   mov        rdi, formatxmm1
  2856 00000F85 [300C000000000000] 
  2857 00000F8D 488B742418              mov        rsi, [rsp+3*8]
  2858 00000F92 488B542410              mov        rdx, [rsp+2*8]
  2859 00000F97 E8(00000000)            call       printf
  2860 00000F9C B800000000              mov qword  rax, 0
  2861 00000FA1 48BF-                   mov        rdi, formatxmm0
  2862 00000FA3 [4A0C000000000000] 
  2863 00000FAB 488B742408              mov        rsi, [rsp+1*8]
  2864 00000FB0 488B1424                mov        rdx, [rsp+0*8]
  2865 00000FB4 E8(00000000)            call       printf
  2866                                  
  2867                                  ;========== Restore all the data to the SEE2 registers =====================================================================================================================
  2868                                  
  2869 00000FB9 66440F10BC24F00000-     movupd     xmm15, [rsp+30*8]
  2870 00000FC2 00                 
  2871 00000FC3 66440F10B424E00000-     movupd     xmm14, [rsp+28*8]
  2872 00000FCC 00                 
  2873 00000FCD 66440F10AC24D00000-     movupd     xmm13, [rsp+26*8]
  2874 00000FD6 00                 
  2875 00000FD7 66440F10A424C00000-     movupd     xmm12, [rsp+24*8]
  2876 00000FE0 00                 
  2877 00000FE1 66440F109C24B00000-     movupd     xmm11, [rsp+22*8]
  2878 00000FEA 00                 
  2879 00000FEB 66440F109424A00000-     movupd     xmm10, [rsp+20*8]
  2880 00000FF4 00                 
  2881 00000FF5 66440F108C24900000-     movupd     xmm9,  [rsp+18*8]
  2882 00000FFE 00                 
  2883 00000FFF 66440F108424800000-     movupd     xmm8,  [rsp+16*8]
  2884 00001008 00                 
  2885 00001009 660F107C2470            movupd     xmm7,  [rsp+14*8]
  2886 0000100F 660F10742460            movupd     xmm6,  [rsp+12*8]
  2887 00001015 660F106C2450            movupd     xmm5,  [rsp+10*8]
  2888 0000101B 660F10642440            movupd     xmm4,  [rsp+8*8]
  2889 00001021 660F105C2430            movupd     xmm3,  [rsp+6*8]
  2890 00001027 660F10542420            movupd     xmm2,  [rsp+4*8]
  2891 0000102D 660F104C2410            movupd     xmm1,  [rsp+2*8]
  2892 00001033 660F100424              movupd     xmm0,  [rsp+0*8]
  2893                                  
  2894                                  ;========= Reverse the pushes that occurred in this subprogram =============================================================================================================
  2895 00001038 58                      pop rax                                                     ;#32
  2896 00001039 58                      pop rax                                                     ;#31
  2897 0000103A 58                      pop rax                                                     ;#30
  2898 0000103B 58                      pop rax                                                     ;#29
  2899 0000103C 58                      pop rax                                                     ;#28
  2900 0000103D 58                      pop rax                                                     ;#27
  2901 0000103E 58                      pop rax                                                     ;#26
  2902 0000103F 58                      pop rax                                                     ;#25
  2903 00001040 58                      pop rax                                                     ;#24
  2904 00001041 58                      pop rax                                                     ;#23
  2905 00001042 58                      pop rax                                                     ;#22
  2906 00001043 58                      pop rax                                                     ;#21
  2907 00001044 58                      pop rax                                                     ;#20
  2908 00001045 58                      pop rax                                                     ;#19
  2909 00001046 58                      pop rax                                                     ;#18
  2910 00001047 58                      pop rax                                                     ;#17
  2911 00001048 58                      pop rax                                                     ;#16
  2912 00001049 58                      pop rax                                                     ;#15
  2913 0000104A 58                      pop rax                                                     ;#14
  2914 0000104B 58                      pop rax                                                     ;#13
  2915 0000104C 58                      pop rax                                                     ;#12
  2916 0000104D 58                      pop rax                                                     ;#11
  2917 0000104E 58                      pop rax                                                     ;#10
  2918 0000104F 58                      pop rax                                                     ;#9
  2919 00001050 58                      pop rax                                                     ;#8
  2920 00001051 58                      pop rax                                                     ;#7
  2921 00001052 58                      pop rax                                                     ;#6
  2922 00001053 58                      pop rax                                                     ;#5
  2923 00001054 58                      pop rax                                                     ;#4
  2924 00001055 58                      pop rax                                                     ;#3
  2925 00001056 58                      pop rax                                                     ;#2
  2926 00001057 58                      pop rax                                                     ;#1
  2927                                  
  2928                                  ;=========== Restore the original values to the general purpose registers =================================================================================================
  2929 00001058 9D                      popf                                                        ;Restore rflags
  2930 00001059 5B                      pop rbx                                                     ;Restore rbx
  2931 0000105A 415F                    pop r15                                                     ;Restore r15
  2932 0000105C 415E                    pop r14                                                     ;Restore r14
  2933 0000105E 415D                    pop r13                                                     ;Restore r13
  2934 00001060 415C                    pop r12                                                     ;Restore r12
  2935 00001062 415B                    pop r11                                                     ;Restore r11
  2936 00001064 415A                    pop r10                                                     ;Restore r10
  2937 00001066 4159                    pop r9                                                      ;Restore r9
  2938 00001068 4158                    pop r8                                                      ;Restore r8
  2939 0000106A 59                      pop rcx                                                     ;Restore rcx
  2940 0000106B 5A                      pop rdx                                                     ;Restore rdx
  2941 0000106C 5E                      pop rsi                                                     ;Restore rsi
  2942 0000106D 5F                      pop rdi                                                     ;Restore rdi
  2943 0000106E 5D                      pop rbp                                                     ;Restore rbp
  2944                                  
  2945                                  ;========== Gently exit from this subprogram ==============================================================================================================================
  2946                                  
  2947 0000106F C20800                  ret 8                                                       ;Pop the address on top of the stack into rip, and then discard 8 more bytes from the top of the stack.
  2948                                  
  2949                                  ;========== End of showxmmsubprogram ======================================================================================================================================
  2950                                  
  2951                                  
  2952                                  
  2953                                  
  2954                                  
  2955                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  2956                                  
  2957                                  
  2958                                  
  2959                                  
  2960                                  ;===========================================================================================================================================================================
  2961                                  ;===========================================================================================================================================================================
  2962                                  ;                             Show YMM Registers Subprogram
  2963                                  ;===========================================================================================================================================================================
  2964                                  ;===========================================================================================================================================================================
  2965                                  ;
  2966                                  ;Author: Floyd Holliday
  2967                                  ;Author email: holliday@fullerton.edu or activeprofessor@yahoo.com
  2968                                  ;Subprogram name: showymmsubprogram
  2969                                  ;Language: X86
  2970                                  ;Syntax: Intel
  2971                                  ;Date begun: 2013-Nov-15
  2972                                  ;Dates modified: 2014-Jan-22, 2014-Mar-4, 2014-Jul-7, 2014-Aug-31
  2973                                  ;Purpose: Show the contents of all 16 ymm registers in the AVX and SSE components.
  2974                                  ;Strategy: First backup all of AVX and SSE using xsave
  2975                                  ;          Second copy all ymm data to the stack
  2976                                  ;          Third display on the standard output device the ymm data from the stack
  2977                                  ;          Fourth restore the original data to AVX and SSE using xrstor
  2978                                  ;Terminology: AVX is Advanced Vector Extensions (state component 2).  SSE is Streaming SIMD Extensions (state component 1).  SIMD is Single Instruction - Multiple Data.
  2979                                  ;The registers ymm span both AVX and SSE: the upper half of each ymm register is in AVX and the lower half is in SSE.
  2980                                  ;Format information:
  2981                                  ;   Page width: 172 columns
  2982                                  ;   Comments begin: column 61
  2983                                  ;   Optimal printing: Landscape, 7 point font, monospace, 8Â½x11 paper
  2984                                  
  2985                                  global showymmsubprogram
  2986                                  
  2987                                  extern printf
  2988                                  
  2989                                  segment .data
  2990                                  
  2991 00000C64 4156582044756D7020-     showymmsubprogram.aveheaderfirst db "AVX Dump # %ld", 10, 0
  2992 00000C6D 2320256C640A00     
  2993 00000C74 202020202020207C2D-     showymmsubprogram.aveheadersecond db "       |-----------------------------ymm registers---------------------------------|", 10, 0
  2994 00000C7D 2D2D2D2D2D2D2D2D2D-
  2995 00000C86 2D2D2D2D2D2D2D2D2D-
  2996 00000C8F 2D2D2D2D2D2D2D2D2D-
  2997 00000C98 2D796D6D2072656769-
  2998 00000CA1 73746572732D2D2D2D-
  2999 00000CAA 2D2D2D2D2D2D2D2D2D-
  3000 00000CB3 2D2D2D2D2D2D2D2D2D-
  3001 00000CBC 2D2D2D2D2D2D2D2D2D-
  3002 00000CC5 2D2D7C0A00         
  3003 00000CCA 202020202020207C20-     showymmsubprogram.aveheaderthird  db "       |                                                                           |", 10, 0
  3004 00000CD3 202020202020202020-
  3005 00000CDC 202020202020202020-
  3006 00000CE5 202020202020202020-
  3007 00000CEE 202020202020202020-
  3008 00000CF7 202020202020202020-
  3009 00000D00 202020202020202020-
  3010 00000D09 202020202020202020-
  3011 00000D12 202020202020202020-
  3012 00000D1B 20207C0A00         
  3013 00000D20 202020202020207C2D-     showymmsubprogram.aveheaderfourth db "       |---------AVX Registers--------------|-----------SSE registers------------| |", 10, 0
  3014 00000D29 2D2D2D2D2D2D2D2D41-
  3015 00000D32 565820526567697374-
  3016 00000D3B 6572732D2D2D2D2D2D-
  3017 00000D44 2D2D2D2D2D2D2D2D7C-
  3018 00000D4D 2D2D2D2D2D2D2D2D2D-
  3019 00000D56 2D2D53534520726567-
  3020 00000D5F 6973746572732D2D2D-
  3021 00000D68 2D2D2D2D2D2D2D2D2D-
  3022 00000D71 7C207C0A00         
  3023 00000D76 202020202020207C20-     showymmsubprogram.aveheaderfifth  db "       |                                    |                                    | |", 10, 0
  3024 00000D7F 202020202020202020-
  3025 00000D88 202020202020202020-
  3026 00000D91 202020202020202020-
  3027 00000D9A 20202020202020207C-
  3028 00000DA3 202020202020202020-
  3029 00000DAC 202020202020202020-
  3030 00000DB5 202020202020202020-
  3031 00000DBE 202020202020202020-
  3032 00000DC7 7C207C0A00         
  3033 00000DCC 796D6D31353A207C20-     showymmsubprogram.aveymm15        db "ymm15: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3034 00000DD5 253031366C78202025-
  3035 00000DDE 3031366C78207C2025-
  3036 00000DE7 3031366C7820202530-
  3037 00000DF0 31366C78207C207C0A-
  3038 00000DF9 00                 
  3039 00000DFA 796D6D31343A207C20-     showymmsubprogram.aveymm14        db "ymm14: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3040 00000E03 253031366C78202025-
  3041 00000E0C 3031366C78207C2025-
  3042 00000E15 3031366C7820202530-
  3043 00000E1E 31366C78207C207C0A-
  3044 00000E27 00                 
  3045 00000E28 796D6D31333A207C20-     showymmsubprogram.aveymm13        db "ymm13: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3046 00000E31 253031366C78202025-
  3047 00000E3A 3031366C78207C2025-
  3048 00000E43 3031366C7820202530-
  3049 00000E4C 31366C78207C207C0A-
  3050 00000E55 00                 
  3051 00000E56 796D6D31323A207C20-     showymmsubprogram.aveymm12        db "ymm12: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3052 00000E5F 253031366C78202025-
  3053 00000E68 3031366C78207C2025-
  3054 00000E71 3031366C7820202530-
  3055 00000E7A 31366C78207C207C0A-
  3056 00000E83 00                 
  3057 00000E84 796D6D31313A207C20-     showymmsubprogram.aveymm11        db "ymm11: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3058 00000E8D 253031366C78202025-
  3059 00000E96 3031366C78207C2025-
  3060 00000E9F 3031366C7820202530-
  3061 00000EA8 31366C78207C207C0A-
  3062 00000EB1 00                 
  3063 00000EB2 796D6D31303A207C20-     showymmsubprogram.aveymm10        db "ymm10: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3064 00000EBB 253031366C78202025-
  3065 00000EC4 3031366C78207C2025-
  3066 00000ECD 3031366C7820202530-
  3067 00000ED6 31366C78207C207C0A-
  3068 00000EDF 00                 
  3069 00000EE0 796D6D393A20207C20-     showymmsubprogram.aveymm9         db "ymm9:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3070 00000EE9 253031366C78202025-
  3071 00000EF2 3031366C78207C2025-
  3072 00000EFB 3031366C7820202530-
  3073 00000F04 31366C78207C207C0A-
  3074 00000F0D 00                 
  3075 00000F0E 796D6D383A20207C20-     showymmsubprogram.aveymm8         db "ymm8:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3076 00000F17 253031366C78202025-
  3077 00000F20 3031366C78207C2025-
  3078 00000F29 3031366C7820202530-
  3079 00000F32 31366C78207C207C0A-
  3080 00000F3B 00                 
  3081 00000F3C 796D6D373A20207C20-     showymmsubprogram.aveymm7         db "ymm7:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3082 00000F45 253031366C78202025-
  3083 00000F4E 3031366C78207C2025-
  3084 00000F57 3031366C7820202530-
  3085 00000F60 31366C78207C207C0A-
  3086 00000F69 00                 
  3087 00000F6A 796D6D363A20207C20-     showymmsubprogram.aveymm6         db "ymm6:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3088 00000F73 253031366C78202025-
  3089 00000F7C 3031366C78207C2025-
  3090 00000F85 3031366C7820202530-
  3091 00000F8E 31366C78207C207C0A-
  3092 00000F97 00                 
  3093 00000F98 796D6D353A20207C20-     showymmsubprogram.aveymm5         db "ymm5:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3094 00000FA1 253031366C78202025-
  3095 00000FAA 3031366C78207C2025-
  3096 00000FB3 3031366C7820202530-
  3097 00000FBC 31366C78207C207C0A-
  3098 00000FC5 00                 
  3099 00000FC6 796D6D343A20207C20-     showymmsubprogram.aveymm4         db "ymm4:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3100 00000FCF 253031366C78202025-
  3101 00000FD8 3031366C78207C2025-
  3102 00000FE1 3031366C7820202530-
  3103 00000FEA 31366C78207C207C0A-
  3104 00000FF3 00                 
  3105 00000FF4 796D6D333A20207C20-     showymmsubprogram.aveymm3         db "ymm3:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3106 00000FFD 253031366C78202025-
  3107 00001006 3031366C78207C2025-
  3108 0000100F 3031366C7820202530-
  3109 00001018 31366C78207C207C0A-
  3110 00001021 00                 
  3111 00001022 796D6D323A20207C20-     showymmsubprogram.aveymm2         db "ymm2:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3112 0000102B 253031366C78202025-
  3113 00001034 3031366C78207C2025-
  3114 0000103D 3031366C7820202530-
  3115 00001046 31366C78207C207C0A-
  3116 0000104F 00                 
  3117 00001050 796D6D313A20207C20-     showymmsubprogram.aveymm1         db "ymm1:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3118 00001059 253031366C78202025-
  3119 00001062 3031366C78207C2025-
  3120 0000106B 3031366C7820202530-
  3121 00001074 31366C78207C207C0A-
  3122 0000107D 00                 
  3123 0000107E 796D6D303A20207C20-     showymmsubprogram.aveymm0         db "ymm0:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  3124 00001087 253031366C78202025-
  3125 00001090 3031366C78207C2025-
  3126 00001099 3031366C7820202530-
  3127 000010A2 31366C78207C207C0A-
  3128 000010AB 00                 
  3129 000010AC 202020202020207C2D-     showymmsubprogram.avefooter       db "       |-------------------------------------------------------------------------|-|", 10, 0
  3130 000010B5 2D2D2D2D2D2D2D2D2D-
  3131 000010BE 2D2D2D2D2D2D2D2D2D-
  3132 000010C7 2D2D2D2D2D2D2D2D2D-
  3133 000010D0 2D2D2D2D2D2D2D2D2D-
  3134 000010D9 2D2D2D2D2D2D2D2D2D-
  3135 000010E2 2D2D2D2D2D2D2D2D2D-
  3136 000010EB 2D2D2D2D2D2D2D2D2D-
  3137 000010F4 2D2D2D2D2D2D2D2D2D-
  3138 000010FD 7C2D7C0A00         
  3139                                  
  3140 00001102 257300                  showymmsubprogram.xsavenotsupported.stringformat db "%s", 0
  3141 00001105 546865207873617665-     showymmsubprogram.xsavenotsupported.notsupportedmessage db "The xsave instruction and the xrstor instruction are not supported in this microprocessor.", 10
  3142 0000110E 20696E737472756374-
  3143 00001117 696F6E20616E642074-
  3144 00001120 686520787273746F72-
  3145 00001129 20696E737472756374-
  3146 00001132 696F6E20617265206E-
  3147 0000113B 6F7420737570706F72-
  3148 00001144 74656420696E207468-
  3149 0000114D 6973206D6963726F70-
  3150 00001156 726F636573736F722E-
  3151 0000115F 0A                 
  3152 00001160 486F77657665722C20-                                                             db "However, showymmregisters will continue without backing up state component data.", 10, 0
  3153 00001169 73686F77796D6D7265-
  3154 00001172 676973746572732077-
  3155 0000117B 696C6C20636F6E7469-
  3156 00001184 6E756520776974686F-
  3157 0000118D 7574206261636B696E-
  3158 00001196 672075702073746174-
  3159 0000119F 6520636F6D706F6E65-
  3160 000011A8 6E7420646174612E0A-
  3161 000011B1 00                 
  3162                                  
  3163                                  segment .bss
  3164                                  
  3165                                  align 64                                                    ;The next data below must begin on a 64-byte boundary
  3166 00000680 <res 00000340>          showymmsubprogram.backuparea resb 832                       ;Create 832 bytes of storage for the data from state components 0 though 2.
  3167                                  
  3168                                  segment .text
  3169                                  
  3170                                  showymmsubprogram:
  3171                                  
  3172                                  ;=========== Back up all the GPRs whether used in this program or not ======================================================================================================
  3173                                  
  3174 00001072 55                      push       rbp                                              ;Save a copy of the stack base pointer
  3175 00001073 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
  3176 00001076 53                      push       rbx                                              ;Back up rbx
  3177 00001077 51                      push       rcx                                              ;Back up rcx
  3178 00001078 52                      push       rdx                                              ;Back up rdx
  3179 00001079 56                      push       rsi                                              ;Back up rsi
  3180 0000107A 57                      push       rdi                                              ;Back up rdi
  3181 0000107B 4150                    push       r8                                               ;Back up r8
  3182 0000107D 4151                    push       r9                                               ;Back up r9
  3183 0000107F 4152                    push       r10                                              ;Back up r10
  3184 00001081 4153                    push       r11                                              ;Back up r11
  3185 00001083 4154                    push       r12                                              ;Back up r12
  3186 00001085 4155                    push       r13                                              ;Back up r13
  3187 00001087 4156                    push       r14                                              ;Back up r14
  3188 00001089 4157                    push       r15                                              ;Back up r15
  3189 0000108B 9C                      pushf                                                       ;Back up rflags
  3190                                  
  3191                                  
  3192                                  ;===========================================================================================================================================================================
  3193                                  ;===== Begin State Component Backup ========================================================================================================================================
  3194                                  ;===========================================================================================================================================================================
  3195                                  
  3196                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor =========================================================================================
  3197                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
  3198                                  ;Preconditions: rax holds 1.
  3199 0000108C B801000000              mov        rax, 1
  3200                                  
  3201                                  ;Execute the cpuid instruction
  3202 00001091 0FA2                    cpuid
  3203                                  
  3204                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
  3205                                  
  3206                                  ;=========== Extract bit #26 and test it ===================================================================================================================================
  3207                                  
  3208 00001093 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
  3209                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
  3210 0000109A 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
  3211 0000109E 742A                    je         .xsavenotsupported                               ;Skip the section that backs up state component data.
  3212                                  
  3213                                  ;========== Call the function to obtain the bitmap of state components =====================================================================================================
  3214                                  
  3215                                  ;Preconditions
  3216 000010A0 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  3217 000010A5 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  3218                                  
  3219                                  ;Call the function
  3220 000010AA 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  3221                                  
  3222                                  ;Postconditions (There are 2 of these):
  3223                                  
  3224                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
  3225                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
  3226                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
  3227                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
  3228                                  ;Therefore, the value in ecx will be less than or equal to 832.
  3229                                  
  3230                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
  3231                                  ;allow only 3 state components maximum.
  3232                                  
  3233 000010AC 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
  3234 000010B2 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
  3235 000010B5 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
  3236 000010BB 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
  3237                                  
  3238                                  ;========== Save all the data of all three components except GPRs ==========================================================================================================
  3239                                  
  3240                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
  3241                                  
  3242                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
  3243 000010BE 0FAE2425[80060000]      xsave      [.backuparea]                                    ;All the data of state components managed by xsave have been written to backuparea.
  3244                                  
  3245 000010C6 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
  3246 000010C8 EB20                    jmp        .startapplication
  3247                                  
  3248                                  ;========== Show message xsave is not supported on this platform ===========================================================================================================
  3249                                  showymmsubprogram.xsavenotsupported:
  3250                                  
  3251 000010CA B800000000              mov        rax, 0
  3252 000010CF 48BF-                   mov        rdi, .stringformat
  3253 000010D1 [0211000000000000] 
  3254 000010D9 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not supported in this microprocessor...."
  3255 000010DB [0511000000000000] 
  3256 000010E3 E8(00000000)            call       printf
  3257                                  
  3258 000010E8 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
  3259                                  
  3260                                  ;===========================================================================================================================================================================
  3261                                  ;===== End of State Component Backup =======================================================================================================================================
  3262                                  ;===========================================================================================================================================================================
  3263                                  
  3264                                  ;===== State of the internal stack at this time ============================================================================================================================
  3265                                  
  3266                                  ;              |---------------------------|
  3267                                  ;     rsp+18*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
  3268                                  ;              |---------------------------|
  3269                                  ;     rsp+17*8 | arbitrary number from user|
  3270                                  ;              |---------------------------|
  3271                                  ;     rsp+16*8 | return address            |
  3272                                  ;              |---------------------------|
  3273                                  ;     rsp+15*8 | rbp                       |
  3274                                  ;              |---------------------------|
  3275                                  ;     rsp+14*8 | rbx                       |
  3276                                  ;              |---------------------------|
  3277                                  ;     rsp+13*8 | rcx                       |
  3278                                  ;              |---------------------------|
  3279                                  ;     rsp+12*8 | rdx                       |
  3280                                  ;              |---------------------------|
  3281                                  ;     rsp+11*8 | rsi                       |
  3282                                  ;              |---------------------------|
  3283                                  ;     rsp+10*8 | rdi                       |
  3284                                  ;              |---------------------------|
  3285                                  ;     rsp+9*8  | r8                        |
  3286                                  ;              |---------------------------|
  3287                                  ;     rsp+8*8  | r9                        |
  3288                                  ;              |---------------------------|
  3289                                  ;     rsp+7*8  | r10                       |
  3290                                  ;              |---------------------------|
  3291                                  ;     rsp+6*8  | r11                       |
  3292                                  ;              |---------------------------|
  3293                                  ;     rsp+5*8  | r12                       |
  3294                                  ;              |---------------------------|
  3295                                  ;     rsp+4*8  | r13                       |
  3296                                  ;              |---------------------------|
  3297                                  ;     rsp+3*8  | r14                       |
  3298                                  ;              |---------------------------|
  3299                                  ;     rsp+2*8  | r15                       |
  3300                                  ;              |---------------------------|
  3301                                  ;     rsp+1*8  | rflags                    |
  3302                                  ;              |---------------------------|
  3303                                  ;     rsp      | flag either -1 or 0       |
  3304                                  ;              |---------------------------|
  3305                                  
  3306                                  ;===========================================================================================================================================================================
  3307                                  showymmsubprogram.startapplication: ;===== Begin the application here: Show contents of ymm registers ======================================================================
  3308                                  ;===========================================================================================================================================================================
  3309                                  
  3310                                  ;========== Copy all ymm data to the system stack ==========================================================================================================================
  3311                                  
  3312 000010EA 4881EC00020000          sub        rsp, 512                                         ;Create storage with the exact size needed to store the data of all ymm registers.
  3313                                  
  3314 000010F1 C57D11BC24E0010000      vmovupd    [rsp+15*32], ymm15                               ;16 tedious copy instructions
  3315 000010FA C57D11B424C0010000      vmovupd    [rsp+14*32], ymm14                               ;ditto
  3316 00001103 C57D11AC24A0010000      vmovupd    [rsp+13*32], ymm13                               ;ditto
  3317 0000110C C57D11A42480010000      vmovupd    [rsp+12*32], ymm12                               ;ditto
  3318 00001115 C57D119C2460010000      vmovupd    [rsp+11*32], ymm11                               ;ditto
  3319 0000111E C57D11942440010000      vmovupd    [rsp+10*32], ymm10                               ;ditto
  3320 00001127 C57D118C2420010000      vmovupd    [rsp+9*32], ymm9                                 ;ditto
  3321 00001130 C57D11842400010000      vmovupd    [rsp+8*32], ymm8                                 ;ditto
  3322 00001139 C5FD11BC24E0000000      vmovupd    [rsp+7*32], ymm7                                 ;ditto
  3323 00001142 C5FD11B424C0000000      vmovupd    [rsp+6*32], ymm6                                 ;ditto
  3324 0000114B C5FD11AC24A0000000      vmovupd    [rsp+5*32], ymm5                                 ;ditto
  3325 00001154 C5FD11A42480000000      vmovupd    [rsp+4*32], ymm4                                 ;ditto
  3326 0000115D C5FD115C2460            vmovupd    [rsp+3*32], ymm3                                 ;ditto
  3327 00001163 C5FD11542440            vmovupd    [rsp+2*32], ymm2                                 ;ditto
  3328 00001169 C5FD114C2420            vmovupd    [rsp+1*32], ymm1                                 ;ditto
  3329 0000116F C5FD110424              vmovupd    [rsp+0*32], ymm0                                 ;ditto
  3330                                  
  3331                                  ;========== End of copying ymm values to the internal stack ================================================================================================================
  3332                                  
  3333                                  ;===== State of the internal stack at this time ============================================================================================================================
  3334                                  
  3335                                  ;               |---------------------------|
  3336                                  ;  rsp+512+18*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
  3337                                  ;               |---------------------------|
  3338                                  ;  rsp+512+17*8 | arbitrary number from user|
  3339                                  ;               |---------------------------|
  3340                                  ;  rsp+512+16*8 | return address            |
  3341                                  ;               |---------------------------|
  3342                                  ;  rsp+512+15*8 | rbp                       |
  3343                                  ;               |---------------------------|
  3344                                  ;  rsp+512+14*8 | rbx                       |
  3345                                  ;               |---------------------------|
  3346                                  ;  rsp+512+13*8 | rcx                       |
  3347                                  ;               |---------------------------|
  3348                                  ;  rsp+512+12*8 | rdx                       |
  3349                                  ;               |---------------------------|
  3350                                  ;  rsp+512+11*8 | rsi                       |
  3351                                  ;               |---------------------------|
  3352                                  ;  rsp+512+10*8 | rdi                       |
  3353                                  ;               |---------------------------|
  3354                                  ;  rsp+512+9*8  | r8                        |
  3355                                  ;               |---------------------------|
  3356                                  ;  rsp+512+8*8  | r9                        |
  3357                                  ;               |---------------------------|
  3358                                  ;  rsp+512+7*8  | r10                       |
  3359                                  ;               |---------------------------|
  3360                                  ;  rsp+512+6*8  | r11                       |
  3361                                  ;               |---------------------------|
  3362                                  ;  rsp+512+5*8  | r12                       |
  3363                                  ;               |---------------------------|
  3364                                  ;  rsp+512+4*8  | r13                       |
  3365                                  ;               |---------------------------|
  3366                                  ;  rsp+512+3*8  | r14                       |
  3367                                  ;               |---------------------------|
  3368                                  ;  rsp+512+2*8  | r15                       |
  3369                                  ;               |---------------------------|
  3370                                  ;  rsp+512+1*8  | rflags                    |
  3371                                  ;               |---------------------------|
  3372                                  ;  rsp+512      | flag either -1 or 0       |
  3373                                  ;               |---------------------------|
  3374                                  ;               |                           |
  3375                                  ;               |                           |
  3376                                  ;               |                           |
  3377                                  ;               |      512 bytes for        |
  3378                                  ;               |      ymm registers        |
  3379                                  ;               |                           |
  3380                                  ;               |                           |
  3381                                  ;               |                           |
  3382                                  ;  rsp          |---------------------------|
  3383                                  
  3384                                  ;========== Begin section that will display all the ymm values =============================================================================================================
  3385 00001174 90<rept>                align 16
  3386 00001180 B800000000              mov qword  rax, 0
  3387 00001185 48BF-                   mov        rdi, showymmsubprogram.aveheaderfirst
  3388 00001187 [640C000000000000] 
  3389 0000118F 488BB42488020000        mov        rsi, [rsp+512+17*8]                            ;rsp+512+17*8 is the location of the ID integer used by the programmer when calling showymmregisters
  3390 00001197 E8(00000000)            call       printf
  3391                                  
  3392 0000119C B800000000              mov qword  rax, 0
  3393 000011A1 48BF-                   mov        rdi, showymmsubprogram.aveheadersecond
  3394 000011A3 [740C000000000000] 
  3395 000011AB E8(00000000)            call       printf
  3396                                  
  3397 000011B0 B800000000              mov qword  rax, 0
  3398 000011B5 48BF-                   mov        rdi, showymmsubprogram.aveheaderthird
  3399 000011B7 [CA0C000000000000] 
  3400 000011BF E8(00000000)            call       printf
  3401                                  
  3402 000011C4 B800000000              mov qword  rax, 0
  3403 000011C9 48BF-                   mov        rdi, showymmsubprogram.aveheaderfourth
  3404 000011CB [200D000000000000] 
  3405 000011D3 E8(00000000)            call       printf
  3406                                  
  3407 000011D8 B800000000              mov qword  rax, 0
  3408 000011DD 48BF-                   mov        rdi, showymmsubprogram.aveheaderfifth
  3409 000011DF [760D000000000000] 
  3410 000011E7 E8(00000000)            call       printf
  3411                                  
  3412 000011EC B800000000              mov qword  rax, 0
  3413 000011F1 48BF-                   mov        rdi, showymmsubprogram.aveymm15
  3414 000011F3 [CC0D000000000000] 
  3415 000011FB 488BB424F8010000        mov        rsi, [rsp+63*8]
  3416 00001203 488B9424F0010000        mov        rdx, [rsp+62*8]
  3417 0000120B 488B8C24E8010000        mov        rcx, [rsp+61*8]
  3418 00001213 4C8B8424E0010000        mov        r8,  [rsp+60*8]
  3419 0000121B E8(00000000)            call       printf
  3420                                  
  3421 00001220 B800000000              mov qword  rax, 0
  3422 00001225 48BF-                   mov        rdi, showymmsubprogram.aveymm14
  3423 00001227 [FA0D000000000000] 
  3424 0000122F 488BB424D8010000        mov        rsi, [rsp+59*8]
  3425 00001237 488B9424D0010000        mov        rdx, [rsp+58*8]
  3426 0000123F 488B8C24C8010000        mov        rcx, [rsp+57*8]
  3427 00001247 4C8B8424C0010000        mov        r8,  [rsp+56*8]
  3428 0000124F E8(00000000)            call       printf
  3429                                  
  3430 00001254 B800000000              mov qword  rax, 0
  3431 00001259 48BF-                   mov        rdi, showymmsubprogram.aveymm13
  3432 0000125B [280E000000000000] 
  3433 00001263 488BB424B8010000        mov        rsi, [rsp+55*8]
  3434 0000126B 488B9424B0010000        mov        rdx, [rsp+54*8]
  3435 00001273 488B8C24A8010000        mov        rcx, [rsp+53*8]
  3436 0000127B 4C8B8424A0010000        mov        r8,  [rsp+52*8]
  3437 00001283 E8(00000000)            call       printf
  3438                                  
  3439 00001288 B800000000              mov qword  rax, 0
  3440 0000128D 48BF-                   mov        rdi, showymmsubprogram.aveymm12
  3441 0000128F [560E000000000000] 
  3442 00001297 488BB42498010000        mov        rsi, [rsp+51*8]
  3443 0000129F 488B942490010000        mov        rdx, [rsp+50*8]
  3444 000012A7 488B8C2488010000        mov        rcx, [rsp+49*8]
  3445 000012AF 4C8B842480010000        mov        r8,  [rsp+48*8]
  3446 000012B7 E8(00000000)            call       printf
  3447                                  
  3448 000012BC B800000000              mov qword  rax, 0
  3449 000012C1 48BF-                   mov        rdi, showymmsubprogram.aveymm11
  3450 000012C3 [840E000000000000] 
  3451 000012CB 488BB42478010000        mov        rsi, [rsp+47*8]
  3452 000012D3 488B942470010000        mov        rdx, [rsp+46*8]
  3453 000012DB 488B8C2468010000        mov        rcx, [rsp+45*8]
  3454 000012E3 4C8B842460010000        mov        r8,  [rsp+44*8]
  3455 000012EB E8(00000000)            call       printf
  3456                                  
  3457 000012F0 B800000000              mov qword  rax, 0
  3458 000012F5 48BF-                   mov        rdi, showymmsubprogram.aveymm10
  3459 000012F7 [B20E000000000000] 
  3460 000012FF 488BB42458010000        mov        rsi, [rsp+43*8]
  3461 00001307 488B942450010000        mov        rdx, [rsp+42*8]
  3462 0000130F 488B8C2448010000        mov        rcx, [rsp+41*8]
  3463 00001317 4C8B842440010000        mov        r8,  [rsp+40*8]
  3464 0000131F E8(00000000)            call       printf
  3465                                  
  3466 00001324 B800000000              mov qword  rax, 0
  3467 00001329 48BF-                   mov        rdi, showymmsubprogram.aveymm9
  3468 0000132B [E00E000000000000] 
  3469 00001333 488BB42438010000        mov        rsi, [rsp+39*8]
  3470 0000133B 488B942430010000        mov        rdx, [rsp+38*8]
  3471 00001343 488B8C2428010000        mov        rcx, [rsp+37*8]
  3472 0000134B 4C8B842420010000        mov        r8,  [rsp+36*8]
  3473 00001353 E8(00000000)            call       printf
  3474                                  
  3475 00001358 B800000000              mov qword  rax, 0
  3476 0000135D 48BF-                   mov        rdi, showymmsubprogram.aveymm8
  3477 0000135F [0E0F000000000000] 
  3478 00001367 488BB42418010000        mov        rsi, [rsp+35*8]
  3479 0000136F 488B942410010000        mov        rdx, [rsp+34*8]
  3480 00001377 488B8C2408010000        mov        rcx, [rsp+33*8]
  3481 0000137F 4C8B842400010000        mov        r8,  [rsp+32*8]
  3482 00001387 E8(00000000)            call       printf
  3483                                  
  3484 0000138C B800000000              mov qword  rax, 0
  3485 00001391 48BF-                   mov        rdi, showymmsubprogram.aveymm7
  3486 00001393 [3C0F000000000000] 
  3487 0000139B 488BB424F8000000        mov        rsi, [rsp+31*8]
  3488 000013A3 488B9424F0000000        mov        rdx, [rsp+30*8]
  3489 000013AB 488B8C24E8000000        mov        rcx, [rsp+29*8]
  3490 000013B3 4C8B8424E0000000        mov        r8,  [rsp+28*8]
  3491 000013BB E8(00000000)            call       printf
  3492                                  
  3493 000013C0 B800000000              mov qword  rax, 0
  3494 000013C5 48BF-                   mov        rdi, showymmsubprogram.aveymm6
  3495 000013C7 [6A0F000000000000] 
  3496 000013CF 488BB424D8000000        mov        rsi, [rsp+27*8]
  3497 000013D7 488B9424D0000000        mov        rdx, [rsp+26*8]
  3498 000013DF 488B8C24C8000000        mov        rcx, [rsp+25*8]
  3499 000013E7 4C8B8424C0000000        mov        r8,  [rsp+24*8]
  3500 000013EF E8(00000000)            call       printf
  3501                                  
  3502 000013F4 B800000000              mov qword  rax, 0
  3503 000013F9 48BF-                   mov        rdi, showymmsubprogram.aveymm5
  3504 000013FB [980F000000000000] 
  3505 00001403 488BB424B8000000        mov        rsi, [rsp+23*8]
  3506 0000140B 488B9424B0000000        mov        rdx, [rsp+22*8]
  3507 00001413 488B8C24A8000000        mov        rcx, [rsp+21*8]
  3508 0000141B 4C8B8424A0000000        mov        r8,  [rsp+20*8]
  3509 00001423 E8(00000000)            call       printf
  3510                                  
  3511 00001428 B800000000              mov qword  rax, 0
  3512 0000142D 48BF-                   mov        rdi, showymmsubprogram.aveymm4
  3513 0000142F [C60F000000000000] 
  3514 00001437 488BB42498000000        mov        rsi, [rsp+19*8]
  3515 0000143F 488B942490000000        mov        rdx, [rsp+18*8]
  3516 00001447 488B8C2488000000        mov        rcx, [rsp+17*8]
  3517 0000144F 4C8B842480000000        mov        r8,  [rsp+16*8]
  3518 00001457 E8(00000000)            call       printf
  3519                                  
  3520 0000145C B800000000              mov qword  rax, 0
  3521 00001461 48BF-                   mov        rdi, showymmsubprogram.aveymm3
  3522 00001463 [F40F000000000000] 
  3523 0000146B 488B742478              mov        rsi, [rsp+15*8]
  3524 00001470 488B542470              mov        rdx, [rsp+14*8]
  3525 00001475 488B4C2468              mov        rcx, [rsp+13*8]
  3526 0000147A 4C8B442460              mov        r8,  [rsp+12*8]
  3527 0000147F E8(00000000)            call       printf
  3528                                  
  3529 00001484 B800000000              mov qword  rax, 0
  3530 00001489 48BF-                   mov        rdi, showymmsubprogram.aveymm2
  3531 0000148B [2210000000000000] 
  3532 00001493 488B742458              mov        rsi, [rsp+11*8]
  3533 00001498 488B542450              mov        rdx, [rsp+10*8]
  3534 0000149D 488B4C2448              mov        rcx, [rsp+9*8]
  3535 000014A2 4C8B442440              mov        r8,  [rsp+8*8]
  3536 000014A7 E8(00000000)            call       printf
  3537                                  
  3538 000014AC B800000000              mov qword  rax, 0
  3539 000014B1 48BF-                   mov        rdi, showymmsubprogram.aveymm1
  3540 000014B3 [5010000000000000] 
  3541 000014BB 488B742438              mov        rsi, [rsp+7*8]
  3542 000014C0 488B542430              mov        rdx, [rsp+6*8]
  3543 000014C5 488B4C2428              mov        rcx, [rsp+5*8]
  3544 000014CA 4C8B442420              mov        r8,  [rsp+4*8]
  3545 000014CF E8(00000000)            call       printf
  3546                                  
  3547 000014D4 B800000000              mov qword  rax, 0
  3548 000014D9 48BF-                   mov        rdi, showymmsubprogram.aveymm0
  3549 000014DB [7E10000000000000] 
  3550 000014E3 488B742418              mov        rsi, [rsp+3*8]
  3551 000014E8 488B542410              mov        rdx, [rsp+2*8]
  3552 000014ED 488B4C2408              mov        rcx, [rsp+1*8]
  3553 000014F2 4C8B0424                mov        r8,  [rsp+0*8]
  3554 000014F6 E8(00000000)            call       printf
  3555                                  
  3556 000014FB B800000000              mov qword  rax, 0
  3557 00001500 48BF-                   mov        rdi, showymmsubprogram.avefooter
  3558 00001502 [AC10000000000000] 
  3559 0000150A E8(00000000)            call       printf
  3560                                  
  3561                                  ;========== End of section that will display all the ymm values ============================================================================================================
  3562                                  
  3563                                  ;========== Reverse the pushes that occurred in this subprogram ============================================================================================================
  3564                                  
  3565                                  ;Earlier in this program, showymmsubprogram, the instruction "sub rsp, 512" created 512 bytes of storage.  Now it is time to free that space
  3566                                  
  3567 0000150F 4881C400020000          add rsp, 512                                                ;Free previously allocated space
  3568                                  
  3569                                  ;The stack in now in the same state it was in when execution of the application started.
  3570                                  
  3571                                  ;===========================================================================================================================================================================
  3572                                  ;===== End of the application: Show contents of AVX registers ==============================================================================================================
  3573                                  ;===========================================================================================================================================================================
  3574                                  
  3575                                  
  3576                                  ;===========================================================================================================================================================================
  3577                                  ;===== Begin State Component Restoration ==================================================================================================================================
  3578                                  ;===========================================================================================================================================================================
  3579                                  
  3580                                  ;===== Check the flag to determine if state components were really backed up ===============================================================================================
  3581                                  
  3582 00001516 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
  3583                                  
  3584 00001517 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
  3585 0000151B 7426                    je         .restoregprs                                     ;There are no data to be restored
  3586                                  
  3587                                  ;Continue with restoration of state components;
  3588                                  
  3589                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
  3590                                  
  3591                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
  3592 0000151D B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  3593 00001522 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  3594                                  
  3595                                  ;Call the function
  3596 00001527 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  3597                                  
  3598                                  ;Postcondition: The bitmap in now in edx:eax
  3599                                  
  3600                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
  3601 00001529 41BF07000000            mov        r15, 7
  3602 0000152F 4C21F8                  and        rax, r15
  3603 00001532 41BF00000000            mov        r15, 0
  3604 00001538 4C21FA                  and        rdx, r15
  3605                                  
  3606 0000153B 0FAE2C25[80060000]      xrstor     [showymmsubprogram.backuparea]
  3607                                  
  3608                                  ;===========================================================================================================================================================================
  3609                                  ;===== End State Component Restoration ====================================================================================================================================
  3610                                  ;===========================================================================================================================================================================
  3611                                  
  3612                                  .restoregprs:
  3613                                  
  3614                                  ;=========== Now restore original values to GPRs ===========================================================================================================================
  3615                                  
  3616 00001543 9D                      popf                                                        ;Restore rflags
  3617 00001544 415F                    pop        r15                                              ;Restore r15
  3618 00001546 415E                    pop        r14                                              ;Restore r14
  3619 00001548 415D                    pop        r13                                              ;Restore r13
  3620 0000154A 415C                    pop        r12                                              ;Restore r12
  3621 0000154C 415B                    pop        r11                                              ;Restore r11
  3622 0000154E 415A                    pop        r10                                              ;Restore r10
  3623 00001550 4159                    pop        r9                                               ;Restore r9
  3624 00001552 4158                    pop        r8                                               ;Restore r8
  3625 00001554 5F                      pop        rdi                                              ;Restore rdi
  3626 00001555 5E                      pop        rsi                                              ;Restore rsi
  3627 00001556 5A                      pop        rdx                                              ;Restore rdx
  3628 00001557 59                      pop        rcx                                              ;Restore rcx
  3629 00001558 5B                      pop        rbx                                              ;Restore rbx
  3630 00001559 5D                      pop        rbp                                              ;Restore rbp
  3631                                  
  3632                                  ;========== Exit gently from this subprogram ===============================================================================================================================
  3633                                  
  3634 0000155A C20800                  ret        8                                                ;Pop the address on top of the stack into rip, and then discard 8 more bytes from the top of the stack.
  3635                                  
  3636                                  ;===========================================================================================================================================================================
  3637                                  ;========== End of showymmsubprogram =======================================================================================================================================
  3638                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  3639                                  
  3640                                  
  3641                                  
  3642                                  
  3643                                  
  3644                                  
  3645                                  
  3646                                  
  3647                                  
  3648                                  
  3649                                  
  3650                                  
  3651                                  ;===========================================================================================================================================================================
  3652                                  ;========== Begin footnotes ================================================================================================================================================
  3653                                  ;===========================================================================================================================================================================
  3654                                  ;From Professional Assembly Language by Richard Blum, page 241.
  3655                                  ;The tag register is used to identify the values with the eight 80-bit FPU data registers.  The tag register uses 16 bits (2 bits per register) to identify
  3656                                  ;the contents of each FPU data registers.  See figure below.
  3657                                  ;
  3658                                  ;Bits:                   15&14 13&12 11&10 9&8 7&6 5&4 3&2 1&0
  3659                                  ;Physical registers:      R7    R6    R5   R4  R3  R2  R1  R0
  3660                                  ;
  3661                                  ;Each tag value corresponds to a physical FPU register.  The 2-bit value for each register can contain on of four special codes indicating the content of the
  3662                                  ;register.  At any given time, an FPU data register can contain any one of the following "tags":
  3663                                      ;code 00:  a valid extended value
  3664                                      ;code 01:  the value zero
  3665                                      ;code 10:  one of the special fp value: denormal, infinity, or nan
  3666                                      ;code 11:  empty [free space, probably a nan]
  3667                                  ;This enables programmers to perform a quick check of the tag register to determine whether valid data may be in an FPU register, instead of having to read 
  3668                                  ;and analyze the contents of the register, although in practice, because you are the one putting the values into the register stack, you should already know 
  3669                                  ;what is there.
  3670                                  ;===========================================================================================================================================================================
  3671                                  
  3672                                  
